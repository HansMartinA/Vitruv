grammar tools.vitruv.dsls.mapping.MappingLanguage
	with tools.vitruv.dsls.mirbase.MirBase

generate mappingLanguage "http://www.kit.edu/ipd/sdq/vitruvius/dsls/mapping/MappingLanguage"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.kit.edu/ipd/sdq/vitruvius/dsls/mirbase/MirBase" as mirBase

MappingFile:
	(imports += MetamodelImport)*
	(mappings += Mapping | mappings += DefaultMapping)*
;

DefaultMapping returns Mapping:
	{Mapping}
	default?='default' name=ValidID ':'
 	('create' (signatures+=Signature 'with' constraints+=SignatureConstraintBlock))*
;

Mapping returns Mapping:
	{Mapping}
	('mapping' name=ValidID ':')?
	
	('when' '('
		requires+=RequiredMapping (',' requires+=RequiredMapping)* 
	 ')')?
	 
 	(
	 	'map'
	 		(
	 			(signatures+=Signature ('with' constraints+=SignatureConstraintBlock)?)
	 	 		'and' (signatures+=Signature ('with' constraints+=SignatureConstraintBlock)?)
	 	 	)?
	  	('{'
	  		constraintsBody=BodyConstraintBlock
	  		(childMappings+=Mapping)* 
	  	'}')?
  	)
;

Signature:
	{Signature}
	'[' (declaredPackage=MetamodelReference ':')? (elements+=NamedMetaclassReference (',' elements+=NamedMetaclassReference)*)? ']'
;

RequiredMapping:
	mapping=[Mapping] ('as' name=ValidID)?
;


ConstraintBlock:
	SignatureConstraintBlock |
	BodyConstraintBlock
;

ConstraintExpression:
	SignatureConstraintExpression |
	BodyConstraintExpression
;

SignatureConstraintBlock:
	{SignatureConstraintBlock}
	('['
		(expressions+=SignatureConstraintExpression ';'?)*
	']')?
;

SignatureConstraintExpression returns ConstraintExpression:
 	InExpression
	| NotNullExpression
	| EqualsLiteralExpression
	| DefaultContainExpression
	| XbaseSignatureConstraintExpression
;

XbaseSignatureConstraintExpression returns ConstraintExpression:
	{XbaseSignatureConstraintExpression}
	'xbase'
		'check' checkBlock=XBlockExpression
		'enforce' enforceBlock=XBlockExpression
;

XbaseBodyConstraintExpression returns ConstraintExpression:
	{XbaseBodyConstraintExpression}
	'xbase'
		'from' metamodel=MetamodelReference
		'with' block=XBlockExpression
;

BodyConstraintBlock:
	{BodyConstraintBlock}
	('['
		(expressions+=BodyConstraintExpression ';'?)*
	']')?
;

BodyConstraintExpression returns ConstraintExpression:
	AttributeEquivalenceExpression
	| XbaseBodyConstraintExpression
;


VariableRef returns ConstraintExpression:
	{VariableRef}
	target=ContextVariable
;

InExpression returns ConstraintExpression:
	{InExpression}
	'in' '(' target=ContextVariable ',' source=FeatureOfContextVariable ')'
;

NotNullExpression returns ConstraintExpression:
	{NotNullExpression}
	'notnull' '(' notNullable=FeatureOfContextVariable  ')'
;

DefaultContainExpression returns ConstraintExpression:
	{DefaultContainExpression}
	(('default-contain' '(' target=ContextVariable ',' source=FeatureOfContextVariable ')')
	| ('default-resource' '(' target=ContextVariable ',' relativeResource=STRING ('relative-to' relativeResourceSource=ContextVariable)? ')'))
;

EqualsLiteralExpression returns ConstraintExpression:
	{EqualsLiteralExpression}
	'equal' '(' target=FeatureOfContextVariable ',' value=ConstraintLiteral ')'
;

AttributeEquivalenceExpression returns ConstraintExpression:
	{AttributeEquivalenceExpression}
	'equal' '(' left=FeatureOfContextVariable ',' right=FeatureOfContextVariable ')'
;

FeatureOfContextVariable:
	context=ContextVariable ('.' feature=[ecore::EStructuralFeature|ValidID])
;

ContextVariable:
	(requiredMappingPath=RequiredMappingPathBase '::')? (targetClass=[mirBase::NamedMetaclassReference|ValidID])
;

RequiredMappingPathBase:
	(requiredMapping=[RequiredMapping|ValidID]) (tail=RequiredMappingPathTail)?
;

RequiredMappingPathTail:
	('.' requiredMapping=[RequiredMapping|ValidID] (tail=RequiredMappingPathTail)?)
;




// LITERALS from Xbase.xtext
ConstraintLiteral:
	ConstraintBooleanLiteral |
	ConstraintNullLiteral |
	ConstraintNumberLiteral |
	ConstraintStringLiteral
;

ConstraintBooleanLiteral returns ConstraintLiteral :
	{ConstraintBooleanLiteral} ('false' | isTrue?='true');

ConstraintNullLiteral returns ConstraintLiteral :
	{ConstraintNullLiteral} 'null';

ConstraintNumberLiteral returns ConstraintLiteral :
	{ConstraintNumberLiteral} value=Number;

ConstraintStringLiteral returns ConstraintLiteral:
	{ConstraintStringLiteral} value=STRING;