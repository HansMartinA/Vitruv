/*
 * generated by Xtext 2.10.0
 */
package tools.vitruv.dsls.mapping.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;
import tools.vitruv.dsls.mirbase.services.MirBaseGrammarAccess;

@Singleton
public class MappingLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MappingFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.mapping.MappingLanguage.MappingFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsMetamodelImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cMappingsAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cMappingsMappingParserRuleCall_1_0_0 = (RuleCall)cMappingsAssignment_1_0.eContents().get(0);
		private final Assignment cMappingsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cMappingsDefaultMappingParserRuleCall_1_1_0 = (RuleCall)cMappingsAssignment_1_1.eContents().get(0);
		
		//MappingFile:
		//	imports+=MetamodelImport* (mappings+=Mapping | mappings+=DefaultMapping)*;
		@Override public ParserRule getRule() { return rule; }
		
		//imports+=MetamodelImport* (mappings+=Mapping | mappings+=DefaultMapping)*
		public Group getGroup() { return cGroup; }
		
		//imports+=MetamodelImport*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//MetamodelImport
		public RuleCall getImportsMetamodelImportParserRuleCall_0_0() { return cImportsMetamodelImportParserRuleCall_0_0; }
		
		//(mappings+=Mapping | mappings+=DefaultMapping)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//mappings+=Mapping
		public Assignment getMappingsAssignment_1_0() { return cMappingsAssignment_1_0; }
		
		//Mapping
		public RuleCall getMappingsMappingParserRuleCall_1_0_0() { return cMappingsMappingParserRuleCall_1_0_0; }
		
		//mappings+=DefaultMapping
		public Assignment getMappingsAssignment_1_1() { return cMappingsAssignment_1_1; }
		
		//DefaultMapping
		public RuleCall getMappingsDefaultMappingParserRuleCall_1_1_0() { return cMappingsDefaultMappingParserRuleCall_1_1_0; }
	}
	public class DefaultMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.mapping.MappingLanguage.DefaultMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMappingAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDefaultAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cDefaultDefaultKeyword_1_0 = (Keyword)cDefaultAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCreateKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Assignment cSignaturesAssignment_4_1_0 = (Assignment)cGroup_4_1.eContents().get(0);
		private final RuleCall cSignaturesSignatureParserRuleCall_4_1_0_0 = (RuleCall)cSignaturesAssignment_4_1_0.eContents().get(0);
		private final Keyword cWithKeyword_4_1_1 = (Keyword)cGroup_4_1.eContents().get(1);
		private final Assignment cConstraintsAssignment_4_1_2 = (Assignment)cGroup_4_1.eContents().get(2);
		private final RuleCall cConstraintsSignatureConstraintBlockParserRuleCall_4_1_2_0 = (RuleCall)cConstraintsAssignment_4_1_2.eContents().get(0);
		
		//DefaultMapping Mapping:
		//	{Mapping} default?='default' name=ValidID ':' ('create' (signatures+=Signature 'with'
		//	constraints+=SignatureConstraintBlock))*
		@Override public ParserRule getRule() { return rule; }
		
		//{Mapping} default?='default' name=ValidID ':' ('create' (signatures+=Signature 'with'
		//constraints+=SignatureConstraintBlock))*
		public Group getGroup() { return cGroup; }
		
		//{Mapping}
		public Action getMappingAction_0() { return cMappingAction_0; }
		
		//default?='default'
		public Assignment getDefaultAssignment_1() { return cDefaultAssignment_1; }
		
		//'default'
		public Keyword getDefaultDefaultKeyword_1_0() { return cDefaultDefaultKeyword_1_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//('create' (signatures+=Signature 'with' constraints+=SignatureConstraintBlock))*
		public Group getGroup_4() { return cGroup_4; }
		
		//'create'
		public Keyword getCreateKeyword_4_0() { return cCreateKeyword_4_0; }
		
		//(signatures+=Signature 'with' constraints+=SignatureConstraintBlock)
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//signatures+=Signature
		public Assignment getSignaturesAssignment_4_1_0() { return cSignaturesAssignment_4_1_0; }
		
		//Signature
		public RuleCall getSignaturesSignatureParserRuleCall_4_1_0_0() { return cSignaturesSignatureParserRuleCall_4_1_0_0; }
		
		//'with'
		public Keyword getWithKeyword_4_1_1() { return cWithKeyword_4_1_1; }
		
		//constraints+=SignatureConstraintBlock
		public Assignment getConstraintsAssignment_4_1_2() { return cConstraintsAssignment_4_1_2; }
		
		//SignatureConstraintBlock
		public RuleCall getConstraintsSignatureConstraintBlockParserRuleCall_4_1_2_0() { return cConstraintsSignatureConstraintBlockParserRuleCall_4_1_2_0; }
	}
	public class MappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.mapping.MappingLanguage.Mapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMappingAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cMappingKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWhenKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cRequiresAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cRequiresRequiredMappingParserRuleCall_2_2_0 = (RuleCall)cRequiresAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cRequiresAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cRequiresRequiredMappingParserRuleCall_2_3_1_0 = (RuleCall)cRequiresAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cMapKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cGroup_3_1.eContents().get(0);
		private final Assignment cSignaturesAssignment_3_1_0_0 = (Assignment)cGroup_3_1_0.eContents().get(0);
		private final RuleCall cSignaturesSignatureParserRuleCall_3_1_0_0_0 = (RuleCall)cSignaturesAssignment_3_1_0_0.eContents().get(0);
		private final Group cGroup_3_1_0_1 = (Group)cGroup_3_1_0.eContents().get(1);
		private final Keyword cWithKeyword_3_1_0_1_0 = (Keyword)cGroup_3_1_0_1.eContents().get(0);
		private final Assignment cConstraintsAssignment_3_1_0_1_1 = (Assignment)cGroup_3_1_0_1.eContents().get(1);
		private final RuleCall cConstraintsSignatureConstraintBlockParserRuleCall_3_1_0_1_1_0 = (RuleCall)cConstraintsAssignment_3_1_0_1_1.eContents().get(0);
		private final Keyword cAndKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Group cGroup_3_1_2 = (Group)cGroup_3_1.eContents().get(2);
		private final Assignment cSignaturesAssignment_3_1_2_0 = (Assignment)cGroup_3_1_2.eContents().get(0);
		private final RuleCall cSignaturesSignatureParserRuleCall_3_1_2_0_0 = (RuleCall)cSignaturesAssignment_3_1_2_0.eContents().get(0);
		private final Group cGroup_3_1_2_1 = (Group)cGroup_3_1_2.eContents().get(1);
		private final Keyword cWithKeyword_3_1_2_1_0 = (Keyword)cGroup_3_1_2_1.eContents().get(0);
		private final Assignment cConstraintsAssignment_3_1_2_1_1 = (Assignment)cGroup_3_1_2_1.eContents().get(1);
		private final RuleCall cConstraintsSignatureConstraintBlockParserRuleCall_3_1_2_1_1_0 = (RuleCall)cConstraintsAssignment_3_1_2_1_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cConstraintsBodyAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cConstraintsBodyBodyConstraintBlockParserRuleCall_3_2_1_0 = (RuleCall)cConstraintsBodyAssignment_3_2_1.eContents().get(0);
		private final Assignment cChildMappingsAssignment_3_2_2 = (Assignment)cGroup_3_2.eContents().get(2);
		private final RuleCall cChildMappingsMappingParserRuleCall_3_2_2_0 = (RuleCall)cChildMappingsAssignment_3_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_2_3 = (Keyword)cGroup_3_2.eContents().get(3);
		
		//Mapping:
		//	{Mapping} ('mapping' name=ValidID ':')? ('when' '('
		//	requires+=RequiredMapping (',' requires+=RequiredMapping)*
		//	')')? ('map' ((signatures+=Signature ('with' constraints+=SignatureConstraintBlock)?)
		//	'and' (signatures+=Signature ('with' constraints+=SignatureConstraintBlock)?))? ('{'
		//	constraintsBody=BodyConstraintBlock
		//	childMappings+=Mapping*
		//	'}')?);
		@Override public ParserRule getRule() { return rule; }
		
		//{Mapping} ('mapping' name=ValidID ':')? ('when' '(' requires+=RequiredMapping (',' requires+=RequiredMapping)* ')')?
		//('map' ((signatures+=Signature ('with' constraints+=SignatureConstraintBlock)?) 'and' (signatures+=Signature ('with'
		//constraints+=SignatureConstraintBlock)?))? ('{' constraintsBody=BodyConstraintBlock childMappings+=Mapping* '}')?)
		public Group getGroup() { return cGroup; }
		
		//{Mapping}
		public Action getMappingAction_0() { return cMappingAction_0; }
		
		//('mapping' name=ValidID ':')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'mapping'
		public Keyword getMappingKeyword_1_0() { return cMappingKeyword_1_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_1_0() { return cNameValidIDParserRuleCall_1_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }
		
		//('when' '(' requires+=RequiredMapping (',' requires+=RequiredMapping)* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'when'
		public Keyword getWhenKeyword_2_0() { return cWhenKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//requires+=RequiredMapping
		public Assignment getRequiresAssignment_2_2() { return cRequiresAssignment_2_2; }
		
		//RequiredMapping
		public RuleCall getRequiresRequiredMappingParserRuleCall_2_2_0() { return cRequiresRequiredMappingParserRuleCall_2_2_0; }
		
		//(',' requires+=RequiredMapping)*
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//','
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }
		
		//requires+=RequiredMapping
		public Assignment getRequiresAssignment_2_3_1() { return cRequiresAssignment_2_3_1; }
		
		//RequiredMapping
		public RuleCall getRequiresRequiredMappingParserRuleCall_2_3_1_0() { return cRequiresRequiredMappingParserRuleCall_2_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }
		
		//('map' ((signatures+=Signature ('with' constraints+=SignatureConstraintBlock)?) 'and' (signatures+=Signature ('with'
		//constraints+=SignatureConstraintBlock)?))? ('{' constraintsBody=BodyConstraintBlock childMappings+=Mapping* '}')?)
		public Group getGroup_3() { return cGroup_3; }
		
		//'map'
		public Keyword getMapKeyword_3_0() { return cMapKeyword_3_0; }
		
		//((signatures+=Signature ('with' constraints+=SignatureConstraintBlock)?) 'and' (signatures+=Signature ('with'
		//constraints+=SignatureConstraintBlock)?))?
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//(signatures+=Signature ('with' constraints+=SignatureConstraintBlock)?)
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }
		
		//signatures+=Signature
		public Assignment getSignaturesAssignment_3_1_0_0() { return cSignaturesAssignment_3_1_0_0; }
		
		//Signature
		public RuleCall getSignaturesSignatureParserRuleCall_3_1_0_0_0() { return cSignaturesSignatureParserRuleCall_3_1_0_0_0; }
		
		//('with' constraints+=SignatureConstraintBlock)?
		public Group getGroup_3_1_0_1() { return cGroup_3_1_0_1; }
		
		//'with'
		public Keyword getWithKeyword_3_1_0_1_0() { return cWithKeyword_3_1_0_1_0; }
		
		//constraints+=SignatureConstraintBlock
		public Assignment getConstraintsAssignment_3_1_0_1_1() { return cConstraintsAssignment_3_1_0_1_1; }
		
		//SignatureConstraintBlock
		public RuleCall getConstraintsSignatureConstraintBlockParserRuleCall_3_1_0_1_1_0() { return cConstraintsSignatureConstraintBlockParserRuleCall_3_1_0_1_1_0; }
		
		//'and'
		public Keyword getAndKeyword_3_1_1() { return cAndKeyword_3_1_1; }
		
		//(signatures+=Signature ('with' constraints+=SignatureConstraintBlock)?)
		public Group getGroup_3_1_2() { return cGroup_3_1_2; }
		
		//signatures+=Signature
		public Assignment getSignaturesAssignment_3_1_2_0() { return cSignaturesAssignment_3_1_2_0; }
		
		//Signature
		public RuleCall getSignaturesSignatureParserRuleCall_3_1_2_0_0() { return cSignaturesSignatureParserRuleCall_3_1_2_0_0; }
		
		//('with' constraints+=SignatureConstraintBlock)?
		public Group getGroup_3_1_2_1() { return cGroup_3_1_2_1; }
		
		//'with'
		public Keyword getWithKeyword_3_1_2_1_0() { return cWithKeyword_3_1_2_1_0; }
		
		//constraints+=SignatureConstraintBlock
		public Assignment getConstraintsAssignment_3_1_2_1_1() { return cConstraintsAssignment_3_1_2_1_1; }
		
		//SignatureConstraintBlock
		public RuleCall getConstraintsSignatureConstraintBlockParserRuleCall_3_1_2_1_1_0() { return cConstraintsSignatureConstraintBlockParserRuleCall_3_1_2_1_1_0; }
		
		//('{' constraintsBody=BodyConstraintBlock childMappings+=Mapping* '}')?
		public Group getGroup_3_2() { return cGroup_3_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_2_0() { return cLeftCurlyBracketKeyword_3_2_0; }
		
		//constraintsBody=BodyConstraintBlock
		public Assignment getConstraintsBodyAssignment_3_2_1() { return cConstraintsBodyAssignment_3_2_1; }
		
		//BodyConstraintBlock
		public RuleCall getConstraintsBodyBodyConstraintBlockParserRuleCall_3_2_1_0() { return cConstraintsBodyBodyConstraintBlockParserRuleCall_3_2_1_0; }
		
		//childMappings+=Mapping*
		public Assignment getChildMappingsAssignment_3_2_2() { return cChildMappingsAssignment_3_2_2; }
		
		//Mapping
		public RuleCall getChildMappingsMappingParserRuleCall_3_2_2_0() { return cChildMappingsMappingParserRuleCall_3_2_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_2_3() { return cRightCurlyBracketKeyword_3_2_3; }
	}
	public class SignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.mapping.MappingLanguage.Signature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSignatureAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cDeclaredPackageAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cDeclaredPackageMetamodelReferenceParserRuleCall_2_0_0 = (RuleCall)cDeclaredPackageAssignment_2_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cElementsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cElementsNamedMetaclassReferenceParserRuleCall_3_0_0 = (RuleCall)cElementsAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cElementsAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cElementsNamedMetaclassReferenceParserRuleCall_3_1_1_0 = (RuleCall)cElementsAssignment_3_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Signature:
		//	{Signature}
		//	'[' (declaredPackage=MetamodelReference ':')? (elements+=NamedMetaclassReference (','
		//	elements+=NamedMetaclassReference)*)? ']';
		@Override public ParserRule getRule() { return rule; }
		
		//{Signature} '[' (declaredPackage=MetamodelReference ':')? (elements+=NamedMetaclassReference (','
		//elements+=NamedMetaclassReference)*)? ']'
		public Group getGroup() { return cGroup; }
		
		//{Signature}
		public Action getSignatureAction_0() { return cSignatureAction_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }
		
		//(declaredPackage=MetamodelReference ':')?
		public Group getGroup_2() { return cGroup_2; }
		
		//declaredPackage=MetamodelReference
		public Assignment getDeclaredPackageAssignment_2_0() { return cDeclaredPackageAssignment_2_0; }
		
		//MetamodelReference
		public RuleCall getDeclaredPackageMetamodelReferenceParserRuleCall_2_0_0() { return cDeclaredPackageMetamodelReferenceParserRuleCall_2_0_0; }
		
		//':'
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }
		
		//(elements+=NamedMetaclassReference (',' elements+=NamedMetaclassReference)*)?
		public Group getGroup_3() { return cGroup_3; }
		
		//elements+=NamedMetaclassReference
		public Assignment getElementsAssignment_3_0() { return cElementsAssignment_3_0; }
		
		//NamedMetaclassReference
		public RuleCall getElementsNamedMetaclassReferenceParserRuleCall_3_0_0() { return cElementsNamedMetaclassReferenceParserRuleCall_3_0_0; }
		
		//(',' elements+=NamedMetaclassReference)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }
		
		//elements+=NamedMetaclassReference
		public Assignment getElementsAssignment_3_1_1() { return cElementsAssignment_3_1_1; }
		
		//NamedMetaclassReference
		public RuleCall getElementsNamedMetaclassReferenceParserRuleCall_3_1_1_0() { return cElementsNamedMetaclassReferenceParserRuleCall_3_1_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}
	public class RequiredMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.mapping.MappingLanguage.RequiredMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMappingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cMappingMappingCrossReference_0_0 = (CrossReference)cMappingAssignment_0.eContents().get(0);
		private final RuleCall cMappingMappingIDTerminalRuleCall_0_0_1 = (RuleCall)cMappingMappingCrossReference_0_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAsKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		
		//RequiredMapping:
		//	mapping=[Mapping] ('as' name=ValidID)?;
		@Override public ParserRule getRule() { return rule; }
		
		//mapping=[Mapping] ('as' name=ValidID)?
		public Group getGroup() { return cGroup; }
		
		//mapping=[Mapping]
		public Assignment getMappingAssignment_0() { return cMappingAssignment_0; }
		
		//[Mapping]
		public CrossReference getMappingMappingCrossReference_0_0() { return cMappingMappingCrossReference_0_0; }
		
		//ID
		public RuleCall getMappingMappingIDTerminalRuleCall_0_0_1() { return cMappingMappingIDTerminalRuleCall_0_0_1; }
		
		//('as' name=ValidID)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'as'
		public Keyword getAsKeyword_1_0() { return cAsKeyword_1_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_1_0() { return cNameValidIDParserRuleCall_1_1_0; }
	}
	public class ConstraintBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.mapping.MappingLanguage.ConstraintBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSignatureConstraintBlockParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBodyConstraintBlockParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConstraintBlock:
		//	SignatureConstraintBlock | BodyConstraintBlock;
		@Override public ParserRule getRule() { return rule; }
		
		//SignatureConstraintBlock | BodyConstraintBlock
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SignatureConstraintBlock
		public RuleCall getSignatureConstraintBlockParserRuleCall_0() { return cSignatureConstraintBlockParserRuleCall_0; }
		
		//BodyConstraintBlock
		public RuleCall getBodyConstraintBlockParserRuleCall_1() { return cBodyConstraintBlockParserRuleCall_1; }
	}
	public class ConstraintExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.mapping.MappingLanguage.ConstraintExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSignatureConstraintExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBodyConstraintExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConstraintExpression:
		//	SignatureConstraintExpression | BodyConstraintExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//SignatureConstraintExpression | BodyConstraintExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SignatureConstraintExpression
		public RuleCall getSignatureConstraintExpressionParserRuleCall_0() { return cSignatureConstraintExpressionParserRuleCall_0; }
		
		//BodyConstraintExpression
		public RuleCall getBodyConstraintExpressionParserRuleCall_1() { return cBodyConstraintExpressionParserRuleCall_1; }
	}
	public class SignatureConstraintBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.mapping.MappingLanguage.SignatureConstraintBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSignatureConstraintBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cExpressionsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cExpressionsSignatureConstraintExpressionParserRuleCall_1_1_0_0 = (RuleCall)cExpressionsAssignment_1_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//SignatureConstraintBlock:
		//	{SignatureConstraintBlock} ('[' (expressions+=SignatureConstraintExpression ';'?)*
		//	']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{SignatureConstraintBlock} ('[' (expressions+=SignatureConstraintExpression ';'?)* ']')?
		public Group getGroup() { return cGroup; }
		
		//{SignatureConstraintBlock}
		public Action getSignatureConstraintBlockAction_0() { return cSignatureConstraintBlockAction_0; }
		
		//('[' (expressions+=SignatureConstraintExpression ';'?)* ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//(expressions+=SignatureConstraintExpression ';'?)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//expressions+=SignatureConstraintExpression
		public Assignment getExpressionsAssignment_1_1_0() { return cExpressionsAssignment_1_1_0; }
		
		//SignatureConstraintExpression
		public RuleCall getExpressionsSignatureConstraintExpressionParserRuleCall_1_1_0_0() { return cExpressionsSignatureConstraintExpressionParserRuleCall_1_1_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_1_1_1() { return cSemicolonKeyword_1_1_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}
	public class SignatureConstraintExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.mapping.MappingLanguage.SignatureConstraintExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNotNullExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEqualsLiteralExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDefaultContainExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cXbaseSignatureConstraintExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//SignatureConstraintExpression ConstraintExpression:
		//	InExpression
		//	| NotNullExpression
		//	| EqualsLiteralExpression
		//	| DefaultContainExpression
		//	| XbaseSignatureConstraintExpression
		@Override public ParserRule getRule() { return rule; }
		
		//InExpression | NotNullExpression | EqualsLiteralExpression | DefaultContainExpression |
		//XbaseSignatureConstraintExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//InExpression
		public RuleCall getInExpressionParserRuleCall_0() { return cInExpressionParserRuleCall_0; }
		
		//NotNullExpression
		public RuleCall getNotNullExpressionParserRuleCall_1() { return cNotNullExpressionParserRuleCall_1; }
		
		//EqualsLiteralExpression
		public RuleCall getEqualsLiteralExpressionParserRuleCall_2() { return cEqualsLiteralExpressionParserRuleCall_2; }
		
		//DefaultContainExpression
		public RuleCall getDefaultContainExpressionParserRuleCall_3() { return cDefaultContainExpressionParserRuleCall_3; }
		
		//XbaseSignatureConstraintExpression
		public RuleCall getXbaseSignatureConstraintExpressionParserRuleCall_4() { return cXbaseSignatureConstraintExpressionParserRuleCall_4; }
	}
	public class XbaseSignatureConstraintExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.mapping.MappingLanguage.XbaseSignatureConstraintExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXbaseSignatureConstraintExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cXbaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cCheckKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCheckBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCheckBlockXBlockExpressionParserRuleCall_3_0 = (RuleCall)cCheckBlockAssignment_3.eContents().get(0);
		private final Keyword cEnforceKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEnforceBlockAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEnforceBlockXBlockExpressionParserRuleCall_5_0 = (RuleCall)cEnforceBlockAssignment_5.eContents().get(0);
		
		//XbaseSignatureConstraintExpression ConstraintExpression:
		//	{XbaseSignatureConstraintExpression}
		//	'xbase'
		//	'check' checkBlock=XBlockExpression
		//	'enforce' enforceBlock=XBlockExpression
		@Override public ParserRule getRule() { return rule; }
		
		//{XbaseSignatureConstraintExpression} 'xbase' 'check' checkBlock=XBlockExpression 'enforce' enforceBlock=XBlockExpression
		public Group getGroup() { return cGroup; }
		
		//{XbaseSignatureConstraintExpression}
		public Action getXbaseSignatureConstraintExpressionAction_0() { return cXbaseSignatureConstraintExpressionAction_0; }
		
		//'xbase'
		public Keyword getXbaseKeyword_1() { return cXbaseKeyword_1; }
		
		//'check'
		public Keyword getCheckKeyword_2() { return cCheckKeyword_2; }
		
		//checkBlock=XBlockExpression
		public Assignment getCheckBlockAssignment_3() { return cCheckBlockAssignment_3; }
		
		//XBlockExpression
		public RuleCall getCheckBlockXBlockExpressionParserRuleCall_3_0() { return cCheckBlockXBlockExpressionParserRuleCall_3_0; }
		
		//'enforce'
		public Keyword getEnforceKeyword_4() { return cEnforceKeyword_4; }
		
		//enforceBlock=XBlockExpression
		public Assignment getEnforceBlockAssignment_5() { return cEnforceBlockAssignment_5; }
		
		//XBlockExpression
		public RuleCall getEnforceBlockXBlockExpressionParserRuleCall_5_0() { return cEnforceBlockXBlockExpressionParserRuleCall_5_0; }
	}
	public class XbaseBodyConstraintExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.mapping.MappingLanguage.XbaseBodyConstraintExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXbaseBodyConstraintExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cXbaseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMetamodelAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMetamodelMetamodelReferenceParserRuleCall_3_0 = (RuleCall)cMetamodelAssignment_3.eContents().get(0);
		private final Keyword cWithKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cBlockAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cBlockXBlockExpressionParserRuleCall_5_0 = (RuleCall)cBlockAssignment_5.eContents().get(0);
		
		//XbaseBodyConstraintExpression ConstraintExpression:
		//	{XbaseBodyConstraintExpression}
		//	'xbase'
		//	'from' metamodel=MetamodelReference
		//	'with' block=XBlockExpression
		@Override public ParserRule getRule() { return rule; }
		
		//{XbaseBodyConstraintExpression} 'xbase' 'from' metamodel=MetamodelReference 'with' block=XBlockExpression
		public Group getGroup() { return cGroup; }
		
		//{XbaseBodyConstraintExpression}
		public Action getXbaseBodyConstraintExpressionAction_0() { return cXbaseBodyConstraintExpressionAction_0; }
		
		//'xbase'
		public Keyword getXbaseKeyword_1() { return cXbaseKeyword_1; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//metamodel=MetamodelReference
		public Assignment getMetamodelAssignment_3() { return cMetamodelAssignment_3; }
		
		//MetamodelReference
		public RuleCall getMetamodelMetamodelReferenceParserRuleCall_3_0() { return cMetamodelMetamodelReferenceParserRuleCall_3_0; }
		
		//'with'
		public Keyword getWithKeyword_4() { return cWithKeyword_4; }
		
		//block=XBlockExpression
		public Assignment getBlockAssignment_5() { return cBlockAssignment_5; }
		
		//XBlockExpression
		public RuleCall getBlockXBlockExpressionParserRuleCall_5_0() { return cBlockXBlockExpressionParserRuleCall_5_0; }
	}
	public class BodyConstraintBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.mapping.MappingLanguage.BodyConstraintBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBodyConstraintBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cExpressionsAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cExpressionsBodyConstraintExpressionParserRuleCall_1_1_0_0 = (RuleCall)cExpressionsAssignment_1_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//BodyConstraintBlock:
		//	{BodyConstraintBlock} ('[' (expressions+=BodyConstraintExpression ';'?)*
		//	']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{BodyConstraintBlock} ('[' (expressions+=BodyConstraintExpression ';'?)* ']')?
		public Group getGroup() { return cGroup; }
		
		//{BodyConstraintBlock}
		public Action getBodyConstraintBlockAction_0() { return cBodyConstraintBlockAction_0; }
		
		//('[' (expressions+=BodyConstraintExpression ';'?)* ']')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }
		
		//(expressions+=BodyConstraintExpression ';'?)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//expressions+=BodyConstraintExpression
		public Assignment getExpressionsAssignment_1_1_0() { return cExpressionsAssignment_1_1_0; }
		
		//BodyConstraintExpression
		public RuleCall getExpressionsBodyConstraintExpressionParserRuleCall_1_1_0_0() { return cExpressionsBodyConstraintExpressionParserRuleCall_1_1_0_0; }
		
		//';'?
		public Keyword getSemicolonKeyword_1_1_1() { return cSemicolonKeyword_1_1_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}
	public class BodyConstraintExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.mapping.MappingLanguage.BodyConstraintExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeEquivalenceExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cXbaseBodyConstraintExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//BodyConstraintExpression ConstraintExpression:
		//	AttributeEquivalenceExpression
		//	| XbaseBodyConstraintExpression
		@Override public ParserRule getRule() { return rule; }
		
		//AttributeEquivalenceExpression | XbaseBodyConstraintExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AttributeEquivalenceExpression
		public RuleCall getAttributeEquivalenceExpressionParserRuleCall_0() { return cAttributeEquivalenceExpressionParserRuleCall_0; }
		
		//XbaseBodyConstraintExpression
		public RuleCall getXbaseBodyConstraintExpressionParserRuleCall_1() { return cXbaseBodyConstraintExpressionParserRuleCall_1; }
	}
	public class VariableRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.mapping.MappingLanguage.VariableRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariableRefAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTargetAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTargetContextVariableParserRuleCall_1_0 = (RuleCall)cTargetAssignment_1.eContents().get(0);
		
		//VariableRef ConstraintExpression:
		//	{VariableRef} target=ContextVariable
		@Override public ParserRule getRule() { return rule; }
		
		//{VariableRef} target=ContextVariable
		public Group getGroup() { return cGroup; }
		
		//{VariableRef}
		public Action getVariableRefAction_0() { return cVariableRefAction_0; }
		
		//target=ContextVariable
		public Assignment getTargetAssignment_1() { return cTargetAssignment_1; }
		
		//ContextVariable
		public RuleCall getTargetContextVariableParserRuleCall_1_0() { return cTargetContextVariableParserRuleCall_1_0; }
	}
	public class InExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.mapping.MappingLanguage.InExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetContextVariableParserRuleCall_3_0 = (RuleCall)cTargetAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSourceAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cSourceFeatureOfContextVariableParserRuleCall_5_0 = (RuleCall)cSourceAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//InExpression ConstraintExpression:
		//	{InExpression}
		//	'in' '(' target=ContextVariable ',' source=FeatureOfContextVariable ')'
		@Override public ParserRule getRule() { return rule; }
		
		//{InExpression} 'in' '(' target=ContextVariable ',' source=FeatureOfContextVariable ')'
		public Group getGroup() { return cGroup; }
		
		//{InExpression}
		public Action getInExpressionAction_0() { return cInExpressionAction_0; }
		
		//'in'
		public Keyword getInKeyword_1() { return cInKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//target=ContextVariable
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }
		
		//ContextVariable
		public RuleCall getTargetContextVariableParserRuleCall_3_0() { return cTargetContextVariableParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//source=FeatureOfContextVariable
		public Assignment getSourceAssignment_5() { return cSourceAssignment_5; }
		
		//FeatureOfContextVariable
		public RuleCall getSourceFeatureOfContextVariableParserRuleCall_5_0() { return cSourceFeatureOfContextVariableParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class NotNullExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.mapping.MappingLanguage.NotNullExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNotNullExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNotnullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNotNullableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNotNullableFeatureOfContextVariableParserRuleCall_3_0 = (RuleCall)cNotNullableAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NotNullExpression ConstraintExpression:
		//	{NotNullExpression}
		//	'notnull' '(' notNullable=FeatureOfContextVariable ')'
		@Override public ParserRule getRule() { return rule; }
		
		//{NotNullExpression} 'notnull' '(' notNullable=FeatureOfContextVariable ')'
		public Group getGroup() { return cGroup; }
		
		//{NotNullExpression}
		public Action getNotNullExpressionAction_0() { return cNotNullExpressionAction_0; }
		
		//'notnull'
		public Keyword getNotnullKeyword_1() { return cNotnullKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//notNullable=FeatureOfContextVariable
		public Assignment getNotNullableAssignment_3() { return cNotNullableAssignment_3; }
		
		//FeatureOfContextVariable
		public RuleCall getNotNullableFeatureOfContextVariableParserRuleCall_3_0() { return cNotNullableFeatureOfContextVariableParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DefaultContainExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.mapping.MappingLanguage.DefaultContainExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDefaultContainExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cDefaultContainKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cTargetAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cTargetContextVariableParserRuleCall_1_0_2_0 = (RuleCall)cTargetAssignment_1_0_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_0_3 = (Keyword)cGroup_1_0.eContents().get(3);
		private final Assignment cSourceAssignment_1_0_4 = (Assignment)cGroup_1_0.eContents().get(4);
		private final RuleCall cSourceFeatureOfContextVariableParserRuleCall_1_0_4_0 = (RuleCall)cSourceAssignment_1_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_5 = (Keyword)cGroup_1_0.eContents().get(5);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cDefaultResourceKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cTargetAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cTargetContextVariableParserRuleCall_1_1_2_0 = (RuleCall)cTargetAssignment_1_1_2.eContents().get(0);
		private final Keyword cCommaKeyword_1_1_3 = (Keyword)cGroup_1_1.eContents().get(3);
		private final Assignment cRelativeResourceAssignment_1_1_4 = (Assignment)cGroup_1_1.eContents().get(4);
		private final RuleCall cRelativeResourceSTRINGTerminalRuleCall_1_1_4_0 = (RuleCall)cRelativeResourceAssignment_1_1_4.eContents().get(0);
		private final Group cGroup_1_1_5 = (Group)cGroup_1_1.eContents().get(5);
		private final Keyword cRelativeToKeyword_1_1_5_0 = (Keyword)cGroup_1_1_5.eContents().get(0);
		private final Assignment cRelativeResourceSourceAssignment_1_1_5_1 = (Assignment)cGroup_1_1_5.eContents().get(1);
		private final RuleCall cRelativeResourceSourceContextVariableParserRuleCall_1_1_5_1_0 = (RuleCall)cRelativeResourceSourceAssignment_1_1_5_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_6 = (Keyword)cGroup_1_1.eContents().get(6);
		
		//DefaultContainExpression ConstraintExpression:
		//	{DefaultContainExpression} ('default-contain' '(' target=ContextVariable ',' source=FeatureOfContextVariable ')' |
		//	'default-resource' '(' target=ContextVariable ',' relativeResource=STRING ('relative-to'
		//	relativeResourceSource=ContextVariable)? ')')
		@Override public ParserRule getRule() { return rule; }
		
		//{DefaultContainExpression} ('default-contain' '(' target=ContextVariable ',' source=FeatureOfContextVariable ')' |
		//'default-resource' '(' target=ContextVariable ',' relativeResource=STRING ('relative-to'
		//relativeResourceSource=ContextVariable)? ')')
		public Group getGroup() { return cGroup; }
		
		//{DefaultContainExpression}
		public Action getDefaultContainExpressionAction_0() { return cDefaultContainExpressionAction_0; }
		
		//('default-contain' '(' target=ContextVariable ',' source=FeatureOfContextVariable ')' | 'default-resource' '('
		//target=ContextVariable ',' relativeResource=STRING ('relative-to' relativeResourceSource=ContextVariable)? ')')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'default-contain' '(' target=ContextVariable ',' source=FeatureOfContextVariable ')'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'default-contain'
		public Keyword getDefaultContainKeyword_1_0_0() { return cDefaultContainKeyword_1_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0_1() { return cLeftParenthesisKeyword_1_0_1; }
		
		//target=ContextVariable
		public Assignment getTargetAssignment_1_0_2() { return cTargetAssignment_1_0_2; }
		
		//ContextVariable
		public RuleCall getTargetContextVariableParserRuleCall_1_0_2_0() { return cTargetContextVariableParserRuleCall_1_0_2_0; }
		
		//','
		public Keyword getCommaKeyword_1_0_3() { return cCommaKeyword_1_0_3; }
		
		//source=FeatureOfContextVariable
		public Assignment getSourceAssignment_1_0_4() { return cSourceAssignment_1_0_4; }
		
		//FeatureOfContextVariable
		public RuleCall getSourceFeatureOfContextVariableParserRuleCall_1_0_4_0() { return cSourceFeatureOfContextVariableParserRuleCall_1_0_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_5() { return cRightParenthesisKeyword_1_0_5; }
		
		//'default-resource' '(' target=ContextVariable ',' relativeResource=STRING ('relative-to'
		//relativeResourceSource=ContextVariable)? ')'
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'default-resource'
		public Keyword getDefaultResourceKeyword_1_1_0() { return cDefaultResourceKeyword_1_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1_1() { return cLeftParenthesisKeyword_1_1_1; }
		
		//target=ContextVariable
		public Assignment getTargetAssignment_1_1_2() { return cTargetAssignment_1_1_2; }
		
		//ContextVariable
		public RuleCall getTargetContextVariableParserRuleCall_1_1_2_0() { return cTargetContextVariableParserRuleCall_1_1_2_0; }
		
		//','
		public Keyword getCommaKeyword_1_1_3() { return cCommaKeyword_1_1_3; }
		
		//relativeResource=STRING
		public Assignment getRelativeResourceAssignment_1_1_4() { return cRelativeResourceAssignment_1_1_4; }
		
		//STRING
		public RuleCall getRelativeResourceSTRINGTerminalRuleCall_1_1_4_0() { return cRelativeResourceSTRINGTerminalRuleCall_1_1_4_0; }
		
		//('relative-to' relativeResourceSource=ContextVariable)?
		public Group getGroup_1_1_5() { return cGroup_1_1_5; }
		
		//'relative-to'
		public Keyword getRelativeToKeyword_1_1_5_0() { return cRelativeToKeyword_1_1_5_0; }
		
		//relativeResourceSource=ContextVariable
		public Assignment getRelativeResourceSourceAssignment_1_1_5_1() { return cRelativeResourceSourceAssignment_1_1_5_1; }
		
		//ContextVariable
		public RuleCall getRelativeResourceSourceContextVariableParserRuleCall_1_1_5_1_0() { return cRelativeResourceSourceContextVariableParserRuleCall_1_1_5_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1_6() { return cRightParenthesisKeyword_1_1_6; }
	}
	public class EqualsLiteralExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.mapping.MappingLanguage.EqualsLiteralExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEqualsLiteralExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEqualKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTargetFeatureOfContextVariableParserRuleCall_3_0 = (RuleCall)cTargetAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueConstraintLiteralParserRuleCall_5_0 = (RuleCall)cValueAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//EqualsLiteralExpression ConstraintExpression:
		//	{EqualsLiteralExpression}
		//	'equal' '(' target=FeatureOfContextVariable ',' value=ConstraintLiteral ')'
		@Override public ParserRule getRule() { return rule; }
		
		//{EqualsLiteralExpression} 'equal' '(' target=FeatureOfContextVariable ',' value=ConstraintLiteral ')'
		public Group getGroup() { return cGroup; }
		
		//{EqualsLiteralExpression}
		public Action getEqualsLiteralExpressionAction_0() { return cEqualsLiteralExpressionAction_0; }
		
		//'equal'
		public Keyword getEqualKeyword_1() { return cEqualKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//target=FeatureOfContextVariable
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }
		
		//FeatureOfContextVariable
		public RuleCall getTargetFeatureOfContextVariableParserRuleCall_3_0() { return cTargetFeatureOfContextVariableParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//value=ConstraintLiteral
		public Assignment getValueAssignment_5() { return cValueAssignment_5; }
		
		//ConstraintLiteral
		public RuleCall getValueConstraintLiteralParserRuleCall_5_0() { return cValueConstraintLiteralParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class AttributeEquivalenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.mapping.MappingLanguage.AttributeEquivalenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAttributeEquivalenceExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEqualKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLeftAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLeftFeatureOfContextVariableParserRuleCall_3_0 = (RuleCall)cLeftAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRightAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRightFeatureOfContextVariableParserRuleCall_5_0 = (RuleCall)cRightAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//AttributeEquivalenceExpression ConstraintExpression:
		//	{AttributeEquivalenceExpression}
		//	'equal' '(' left=FeatureOfContextVariable ',' right=FeatureOfContextVariable ')'
		@Override public ParserRule getRule() { return rule; }
		
		//{AttributeEquivalenceExpression} 'equal' '(' left=FeatureOfContextVariable ',' right=FeatureOfContextVariable ')'
		public Group getGroup() { return cGroup; }
		
		//{AttributeEquivalenceExpression}
		public Action getAttributeEquivalenceExpressionAction_0() { return cAttributeEquivalenceExpressionAction_0; }
		
		//'equal'
		public Keyword getEqualKeyword_1() { return cEqualKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//left=FeatureOfContextVariable
		public Assignment getLeftAssignment_3() { return cLeftAssignment_3; }
		
		//FeatureOfContextVariable
		public RuleCall getLeftFeatureOfContextVariableParserRuleCall_3_0() { return cLeftFeatureOfContextVariableParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//right=FeatureOfContextVariable
		public Assignment getRightAssignment_5() { return cRightAssignment_5; }
		
		//FeatureOfContextVariable
		public RuleCall getRightFeatureOfContextVariableParserRuleCall_5_0() { return cRightFeatureOfContextVariableParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class FeatureOfContextVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.mapping.MappingLanguage.FeatureOfContextVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cContextAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cContextContextVariableParserRuleCall_0_0 = (RuleCall)cContextAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cFeatureAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cFeatureEStructuralFeatureCrossReference_1_1_0 = (CrossReference)cFeatureAssignment_1_1.eContents().get(0);
		private final RuleCall cFeatureEStructuralFeatureValidIDParserRuleCall_1_1_0_1 = (RuleCall)cFeatureEStructuralFeatureCrossReference_1_1_0.eContents().get(1);
		
		//FeatureOfContextVariable:
		//	context=ContextVariable ('.' feature=[ecore::EStructuralFeature|ValidID]);
		@Override public ParserRule getRule() { return rule; }
		
		//context=ContextVariable ('.' feature=[ecore::EStructuralFeature|ValidID])
		public Group getGroup() { return cGroup; }
		
		//context=ContextVariable
		public Assignment getContextAssignment_0() { return cContextAssignment_0; }
		
		//ContextVariable
		public RuleCall getContextContextVariableParserRuleCall_0_0() { return cContextContextVariableParserRuleCall_0_0; }
		
		//('.' feature=[ecore::EStructuralFeature|ValidID])
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//feature=[ecore::EStructuralFeature|ValidID]
		public Assignment getFeatureAssignment_1_1() { return cFeatureAssignment_1_1; }
		
		//[ecore::EStructuralFeature|ValidID]
		public CrossReference getFeatureEStructuralFeatureCrossReference_1_1_0() { return cFeatureEStructuralFeatureCrossReference_1_1_0; }
		
		//ValidID
		public RuleCall getFeatureEStructuralFeatureValidIDParserRuleCall_1_1_0_1() { return cFeatureEStructuralFeatureValidIDParserRuleCall_1_1_0_1; }
	}
	public class ContextVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.mapping.MappingLanguage.ContextVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cRequiredMappingPathAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cRequiredMappingPathRequiredMappingPathBaseParserRuleCall_0_0_0 = (RuleCall)cRequiredMappingPathAssignment_0_0.eContents().get(0);
		private final Keyword cColonColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cTargetClassAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTargetClassNamedMetaclassReferenceCrossReference_1_0 = (CrossReference)cTargetClassAssignment_1.eContents().get(0);
		private final RuleCall cTargetClassNamedMetaclassReferenceValidIDParserRuleCall_1_0_1 = (RuleCall)cTargetClassNamedMetaclassReferenceCrossReference_1_0.eContents().get(1);
		
		//ContextVariable:
		//	(requiredMappingPath=RequiredMappingPathBase '::')? targetClass=[mirBase::NamedMetaclassReference|ValidID];
		@Override public ParserRule getRule() { return rule; }
		
		//(requiredMappingPath=RequiredMappingPathBase '::')? targetClass=[mirBase::NamedMetaclassReference|ValidID]
		public Group getGroup() { return cGroup; }
		
		//(requiredMappingPath=RequiredMappingPathBase '::')?
		public Group getGroup_0() { return cGroup_0; }
		
		//requiredMappingPath=RequiredMappingPathBase
		public Assignment getRequiredMappingPathAssignment_0_0() { return cRequiredMappingPathAssignment_0_0; }
		
		//RequiredMappingPathBase
		public RuleCall getRequiredMappingPathRequiredMappingPathBaseParserRuleCall_0_0_0() { return cRequiredMappingPathRequiredMappingPathBaseParserRuleCall_0_0_0; }
		
		//'::'
		public Keyword getColonColonKeyword_0_1() { return cColonColonKeyword_0_1; }
		
		//targetClass=[mirBase::NamedMetaclassReference|ValidID]
		public Assignment getTargetClassAssignment_1() { return cTargetClassAssignment_1; }
		
		//[mirBase::NamedMetaclassReference|ValidID]
		public CrossReference getTargetClassNamedMetaclassReferenceCrossReference_1_0() { return cTargetClassNamedMetaclassReferenceCrossReference_1_0; }
		
		//ValidID
		public RuleCall getTargetClassNamedMetaclassReferenceValidIDParserRuleCall_1_0_1() { return cTargetClassNamedMetaclassReferenceValidIDParserRuleCall_1_0_1; }
	}
	public class RequiredMappingPathBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.mapping.MappingLanguage.RequiredMappingPathBase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRequiredMappingAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRequiredMappingRequiredMappingCrossReference_0_0 = (CrossReference)cRequiredMappingAssignment_0.eContents().get(0);
		private final RuleCall cRequiredMappingRequiredMappingValidIDParserRuleCall_0_0_1 = (RuleCall)cRequiredMappingRequiredMappingCrossReference_0_0.eContents().get(1);
		private final Assignment cTailAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTailRequiredMappingPathTailParserRuleCall_1_0 = (RuleCall)cTailAssignment_1.eContents().get(0);
		
		//RequiredMappingPathBase:
		//	requiredMapping=[RequiredMapping|ValidID] tail=RequiredMappingPathTail?;
		@Override public ParserRule getRule() { return rule; }
		
		//requiredMapping=[RequiredMapping|ValidID] tail=RequiredMappingPathTail?
		public Group getGroup() { return cGroup; }
		
		//requiredMapping=[RequiredMapping|ValidID]
		public Assignment getRequiredMappingAssignment_0() { return cRequiredMappingAssignment_0; }
		
		//[RequiredMapping|ValidID]
		public CrossReference getRequiredMappingRequiredMappingCrossReference_0_0() { return cRequiredMappingRequiredMappingCrossReference_0_0; }
		
		//ValidID
		public RuleCall getRequiredMappingRequiredMappingValidIDParserRuleCall_0_0_1() { return cRequiredMappingRequiredMappingValidIDParserRuleCall_0_0_1; }
		
		//tail=RequiredMappingPathTail?
		public Assignment getTailAssignment_1() { return cTailAssignment_1; }
		
		//RequiredMappingPathTail
		public RuleCall getTailRequiredMappingPathTailParserRuleCall_1_0() { return cTailRequiredMappingPathTailParserRuleCall_1_0; }
	}
	public class RequiredMappingPathTailElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.mapping.MappingLanguage.RequiredMappingPathTail");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFullStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRequiredMappingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRequiredMappingRequiredMappingCrossReference_1_0 = (CrossReference)cRequiredMappingAssignment_1.eContents().get(0);
		private final RuleCall cRequiredMappingRequiredMappingValidIDParserRuleCall_1_0_1 = (RuleCall)cRequiredMappingRequiredMappingCrossReference_1_0.eContents().get(1);
		private final Assignment cTailAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTailRequiredMappingPathTailParserRuleCall_2_0 = (RuleCall)cTailAssignment_2.eContents().get(0);
		
		//RequiredMappingPathTail:
		//	'.' requiredMapping=[RequiredMapping|ValidID] tail=RequiredMappingPathTail?;
		@Override public ParserRule getRule() { return rule; }
		
		//'.' requiredMapping=[RequiredMapping|ValidID] tail=RequiredMappingPathTail?
		public Group getGroup() { return cGroup; }
		
		//'.'
		public Keyword getFullStopKeyword_0() { return cFullStopKeyword_0; }
		
		//requiredMapping=[RequiredMapping|ValidID]
		public Assignment getRequiredMappingAssignment_1() { return cRequiredMappingAssignment_1; }
		
		//[RequiredMapping|ValidID]
		public CrossReference getRequiredMappingRequiredMappingCrossReference_1_0() { return cRequiredMappingRequiredMappingCrossReference_1_0; }
		
		//ValidID
		public RuleCall getRequiredMappingRequiredMappingValidIDParserRuleCall_1_0_1() { return cRequiredMappingRequiredMappingValidIDParserRuleCall_1_0_1; }
		
		//tail=RequiredMappingPathTail?
		public Assignment getTailAssignment_2() { return cTailAssignment_2; }
		
		//RequiredMappingPathTail
		public RuleCall getTailRequiredMappingPathTailParserRuleCall_2_0() { return cTailRequiredMappingPathTailParserRuleCall_2_0; }
	}
	public class ConstraintLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.mapping.MappingLanguage.ConstraintLiteral");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cConstraintBooleanLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstraintNullLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConstraintNumberLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cConstraintStringLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// LITERALS from Xbase.xtext
		//ConstraintLiteral:
		//	ConstraintBooleanLiteral | ConstraintNullLiteral | ConstraintNumberLiteral | ConstraintStringLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//ConstraintBooleanLiteral | ConstraintNullLiteral | ConstraintNumberLiteral | ConstraintStringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ConstraintBooleanLiteral
		public RuleCall getConstraintBooleanLiteralParserRuleCall_0() { return cConstraintBooleanLiteralParserRuleCall_0; }
		
		//ConstraintNullLiteral
		public RuleCall getConstraintNullLiteralParserRuleCall_1() { return cConstraintNullLiteralParserRuleCall_1; }
		
		//ConstraintNumberLiteral
		public RuleCall getConstraintNumberLiteralParserRuleCall_2() { return cConstraintNumberLiteralParserRuleCall_2; }
		
		//ConstraintStringLiteral
		public RuleCall getConstraintStringLiteralParserRuleCall_3() { return cConstraintStringLiteralParserRuleCall_3; }
	}
	public class ConstraintBooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.mapping.MappingLanguage.ConstraintBooleanLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstraintBooleanLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cFalseKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Assignment cIsTrueAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cIsTrueTrueKeyword_1_1_0 = (Keyword)cIsTrueAssignment_1_1.eContents().get(0);
		
		//ConstraintBooleanLiteral ConstraintLiteral:
		//	{ConstraintBooleanLiteral} ('false' | isTrue?='true')
		@Override public ParserRule getRule() { return rule; }
		
		//{ConstraintBooleanLiteral} ('false' | isTrue?='true')
		public Group getGroup() { return cGroup; }
		
		//{ConstraintBooleanLiteral}
		public Action getConstraintBooleanLiteralAction_0() { return cConstraintBooleanLiteralAction_0; }
		
		//('false' | isTrue?='true')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'false'
		public Keyword getFalseKeyword_1_0() { return cFalseKeyword_1_0; }
		
		//isTrue?='true'
		public Assignment getIsTrueAssignment_1_1() { return cIsTrueAssignment_1_1; }
		
		//'true'
		public Keyword getIsTrueTrueKeyword_1_1_0() { return cIsTrueTrueKeyword_1_1_0; }
	}
	public class ConstraintNullLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.mapping.MappingLanguage.ConstraintNullLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstraintNullLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNullKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ConstraintNullLiteral ConstraintLiteral:
		//	{ConstraintNullLiteral} 'null'
		@Override public ParserRule getRule() { return rule; }
		
		//{ConstraintNullLiteral} 'null'
		public Group getGroup() { return cGroup; }
		
		//{ConstraintNullLiteral}
		public Action getConstraintNullLiteralAction_0() { return cConstraintNullLiteralAction_0; }
		
		//'null'
		public Keyword getNullKeyword_1() { return cNullKeyword_1; }
	}
	public class ConstraintNumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.mapping.MappingLanguage.ConstraintNumberLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstraintNumberLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueNumberParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ConstraintNumberLiteral ConstraintLiteral:
		//	{ConstraintNumberLiteral} value=Number
		@Override public ParserRule getRule() { return rule; }
		
		//{ConstraintNumberLiteral} value=Number
		public Group getGroup() { return cGroup; }
		
		//{ConstraintNumberLiteral}
		public Action getConstraintNumberLiteralAction_0() { return cConstraintNumberLiteralAction_0; }
		
		//value=Number
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Number
		public RuleCall getValueNumberParserRuleCall_1_0() { return cValueNumberParserRuleCall_1_0; }
	}
	public class ConstraintStringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tools.vitruv.dsls.mapping.MappingLanguage.ConstraintStringLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConstraintStringLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ConstraintStringLiteral ConstraintLiteral:
		//	{ConstraintStringLiteral} value=STRING
		@Override public ParserRule getRule() { return rule; }
		
		//{ConstraintStringLiteral} value=STRING
		public Group getGroup() { return cGroup; }
		
		//{ConstraintStringLiteral}
		public Action getConstraintStringLiteralAction_0() { return cConstraintStringLiteralAction_0; }
		
		//value=STRING
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_1_0() { return cValueSTRINGTerminalRuleCall_1_0; }
	}
	
	
	private final MappingFileElements pMappingFile;
	private final DefaultMappingElements pDefaultMapping;
	private final MappingElements pMapping;
	private final SignatureElements pSignature;
	private final RequiredMappingElements pRequiredMapping;
	private final ConstraintBlockElements pConstraintBlock;
	private final ConstraintExpressionElements pConstraintExpression;
	private final SignatureConstraintBlockElements pSignatureConstraintBlock;
	private final SignatureConstraintExpressionElements pSignatureConstraintExpression;
	private final XbaseSignatureConstraintExpressionElements pXbaseSignatureConstraintExpression;
	private final XbaseBodyConstraintExpressionElements pXbaseBodyConstraintExpression;
	private final BodyConstraintBlockElements pBodyConstraintBlock;
	private final BodyConstraintExpressionElements pBodyConstraintExpression;
	private final VariableRefElements pVariableRef;
	private final InExpressionElements pInExpression;
	private final NotNullExpressionElements pNotNullExpression;
	private final DefaultContainExpressionElements pDefaultContainExpression;
	private final EqualsLiteralExpressionElements pEqualsLiteralExpression;
	private final AttributeEquivalenceExpressionElements pAttributeEquivalenceExpression;
	private final FeatureOfContextVariableElements pFeatureOfContextVariable;
	private final ContextVariableElements pContextVariable;
	private final RequiredMappingPathBaseElements pRequiredMappingPathBase;
	private final RequiredMappingPathTailElements pRequiredMappingPathTail;
	private final ConstraintLiteralElements pConstraintLiteral;
	private final ConstraintBooleanLiteralElements pConstraintBooleanLiteral;
	private final ConstraintNullLiteralElements pConstraintNullLiteral;
	private final ConstraintNumberLiteralElements pConstraintNumberLiteral;
	private final ConstraintStringLiteralElements pConstraintStringLiteral;
	
	private final Grammar grammar;
	
	private final MirBaseGrammarAccess gaMirBase;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public MappingLanguageGrammarAccess(GrammarProvider grammarProvider,
			MirBaseGrammarAccess gaMirBase,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaMirBase = gaMirBase;
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pMappingFile = new MappingFileElements();
		this.pDefaultMapping = new DefaultMappingElements();
		this.pMapping = new MappingElements();
		this.pSignature = new SignatureElements();
		this.pRequiredMapping = new RequiredMappingElements();
		this.pConstraintBlock = new ConstraintBlockElements();
		this.pConstraintExpression = new ConstraintExpressionElements();
		this.pSignatureConstraintBlock = new SignatureConstraintBlockElements();
		this.pSignatureConstraintExpression = new SignatureConstraintExpressionElements();
		this.pXbaseSignatureConstraintExpression = new XbaseSignatureConstraintExpressionElements();
		this.pXbaseBodyConstraintExpression = new XbaseBodyConstraintExpressionElements();
		this.pBodyConstraintBlock = new BodyConstraintBlockElements();
		this.pBodyConstraintExpression = new BodyConstraintExpressionElements();
		this.pVariableRef = new VariableRefElements();
		this.pInExpression = new InExpressionElements();
		this.pNotNullExpression = new NotNullExpressionElements();
		this.pDefaultContainExpression = new DefaultContainExpressionElements();
		this.pEqualsLiteralExpression = new EqualsLiteralExpressionElements();
		this.pAttributeEquivalenceExpression = new AttributeEquivalenceExpressionElements();
		this.pFeatureOfContextVariable = new FeatureOfContextVariableElements();
		this.pContextVariable = new ContextVariableElements();
		this.pRequiredMappingPathBase = new RequiredMappingPathBaseElements();
		this.pRequiredMappingPathTail = new RequiredMappingPathTailElements();
		this.pConstraintLiteral = new ConstraintLiteralElements();
		this.pConstraintBooleanLiteral = new ConstraintBooleanLiteralElements();
		this.pConstraintNullLiteral = new ConstraintNullLiteralElements();
		this.pConstraintNumberLiteral = new ConstraintNumberLiteralElements();
		this.pConstraintStringLiteral = new ConstraintStringLiteralElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("tools.vitruv.dsls.mapping.MappingLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public MirBaseGrammarAccess getMirBaseGrammarAccess() {
		return gaMirBase;
	}
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	//MappingFile:
	//	imports+=MetamodelImport* (mappings+=Mapping | mappings+=DefaultMapping)*;
	public MappingFileElements getMappingFileAccess() {
		return pMappingFile;
	}
	
	public ParserRule getMappingFileRule() {
		return getMappingFileAccess().getRule();
	}
	
	//DefaultMapping Mapping:
	//	{Mapping} default?='default' name=ValidID ':' ('create' (signatures+=Signature 'with'
	//	constraints+=SignatureConstraintBlock))*
	public DefaultMappingElements getDefaultMappingAccess() {
		return pDefaultMapping;
	}
	
	public ParserRule getDefaultMappingRule() {
		return getDefaultMappingAccess().getRule();
	}
	
	//Mapping:
	//	{Mapping} ('mapping' name=ValidID ':')? ('when' '('
	//	requires+=RequiredMapping (',' requires+=RequiredMapping)*
	//	')')? ('map' ((signatures+=Signature ('with' constraints+=SignatureConstraintBlock)?)
	//	'and' (signatures+=Signature ('with' constraints+=SignatureConstraintBlock)?))? ('{'
	//	constraintsBody=BodyConstraintBlock
	//	childMappings+=Mapping*
	//	'}')?);
	public MappingElements getMappingAccess() {
		return pMapping;
	}
	
	public ParserRule getMappingRule() {
		return getMappingAccess().getRule();
	}
	
	//Signature:
	//	{Signature}
	//	'[' (declaredPackage=MetamodelReference ':')? (elements+=NamedMetaclassReference (','
	//	elements+=NamedMetaclassReference)*)? ']';
	public SignatureElements getSignatureAccess() {
		return pSignature;
	}
	
	public ParserRule getSignatureRule() {
		return getSignatureAccess().getRule();
	}
	
	//RequiredMapping:
	//	mapping=[Mapping] ('as' name=ValidID)?;
	public RequiredMappingElements getRequiredMappingAccess() {
		return pRequiredMapping;
	}
	
	public ParserRule getRequiredMappingRule() {
		return getRequiredMappingAccess().getRule();
	}
	
	//ConstraintBlock:
	//	SignatureConstraintBlock | BodyConstraintBlock;
	public ConstraintBlockElements getConstraintBlockAccess() {
		return pConstraintBlock;
	}
	
	public ParserRule getConstraintBlockRule() {
		return getConstraintBlockAccess().getRule();
	}
	
	//ConstraintExpression:
	//	SignatureConstraintExpression | BodyConstraintExpression;
	public ConstraintExpressionElements getConstraintExpressionAccess() {
		return pConstraintExpression;
	}
	
	public ParserRule getConstraintExpressionRule() {
		return getConstraintExpressionAccess().getRule();
	}
	
	//SignatureConstraintBlock:
	//	{SignatureConstraintBlock} ('[' (expressions+=SignatureConstraintExpression ';'?)*
	//	']')?;
	public SignatureConstraintBlockElements getSignatureConstraintBlockAccess() {
		return pSignatureConstraintBlock;
	}
	
	public ParserRule getSignatureConstraintBlockRule() {
		return getSignatureConstraintBlockAccess().getRule();
	}
	
	//SignatureConstraintExpression ConstraintExpression:
	//	InExpression
	//	| NotNullExpression
	//	| EqualsLiteralExpression
	//	| DefaultContainExpression
	//	| XbaseSignatureConstraintExpression
	public SignatureConstraintExpressionElements getSignatureConstraintExpressionAccess() {
		return pSignatureConstraintExpression;
	}
	
	public ParserRule getSignatureConstraintExpressionRule() {
		return getSignatureConstraintExpressionAccess().getRule();
	}
	
	//XbaseSignatureConstraintExpression ConstraintExpression:
	//	{XbaseSignatureConstraintExpression}
	//	'xbase'
	//	'check' checkBlock=XBlockExpression
	//	'enforce' enforceBlock=XBlockExpression
	public XbaseSignatureConstraintExpressionElements getXbaseSignatureConstraintExpressionAccess() {
		return pXbaseSignatureConstraintExpression;
	}
	
	public ParserRule getXbaseSignatureConstraintExpressionRule() {
		return getXbaseSignatureConstraintExpressionAccess().getRule();
	}
	
	//XbaseBodyConstraintExpression ConstraintExpression:
	//	{XbaseBodyConstraintExpression}
	//	'xbase'
	//	'from' metamodel=MetamodelReference
	//	'with' block=XBlockExpression
	public XbaseBodyConstraintExpressionElements getXbaseBodyConstraintExpressionAccess() {
		return pXbaseBodyConstraintExpression;
	}
	
	public ParserRule getXbaseBodyConstraintExpressionRule() {
		return getXbaseBodyConstraintExpressionAccess().getRule();
	}
	
	//BodyConstraintBlock:
	//	{BodyConstraintBlock} ('[' (expressions+=BodyConstraintExpression ';'?)*
	//	']')?;
	public BodyConstraintBlockElements getBodyConstraintBlockAccess() {
		return pBodyConstraintBlock;
	}
	
	public ParserRule getBodyConstraintBlockRule() {
		return getBodyConstraintBlockAccess().getRule();
	}
	
	//BodyConstraintExpression ConstraintExpression:
	//	AttributeEquivalenceExpression
	//	| XbaseBodyConstraintExpression
	public BodyConstraintExpressionElements getBodyConstraintExpressionAccess() {
		return pBodyConstraintExpression;
	}
	
	public ParserRule getBodyConstraintExpressionRule() {
		return getBodyConstraintExpressionAccess().getRule();
	}
	
	//VariableRef ConstraintExpression:
	//	{VariableRef} target=ContextVariable
	public VariableRefElements getVariableRefAccess() {
		return pVariableRef;
	}
	
	public ParserRule getVariableRefRule() {
		return getVariableRefAccess().getRule();
	}
	
	//InExpression ConstraintExpression:
	//	{InExpression}
	//	'in' '(' target=ContextVariable ',' source=FeatureOfContextVariable ')'
	public InExpressionElements getInExpressionAccess() {
		return pInExpression;
	}
	
	public ParserRule getInExpressionRule() {
		return getInExpressionAccess().getRule();
	}
	
	//NotNullExpression ConstraintExpression:
	//	{NotNullExpression}
	//	'notnull' '(' notNullable=FeatureOfContextVariable ')'
	public NotNullExpressionElements getNotNullExpressionAccess() {
		return pNotNullExpression;
	}
	
	public ParserRule getNotNullExpressionRule() {
		return getNotNullExpressionAccess().getRule();
	}
	
	//DefaultContainExpression ConstraintExpression:
	//	{DefaultContainExpression} ('default-contain' '(' target=ContextVariable ',' source=FeatureOfContextVariable ')' |
	//	'default-resource' '(' target=ContextVariable ',' relativeResource=STRING ('relative-to'
	//	relativeResourceSource=ContextVariable)? ')')
	public DefaultContainExpressionElements getDefaultContainExpressionAccess() {
		return pDefaultContainExpression;
	}
	
	public ParserRule getDefaultContainExpressionRule() {
		return getDefaultContainExpressionAccess().getRule();
	}
	
	//EqualsLiteralExpression ConstraintExpression:
	//	{EqualsLiteralExpression}
	//	'equal' '(' target=FeatureOfContextVariable ',' value=ConstraintLiteral ')'
	public EqualsLiteralExpressionElements getEqualsLiteralExpressionAccess() {
		return pEqualsLiteralExpression;
	}
	
	public ParserRule getEqualsLiteralExpressionRule() {
		return getEqualsLiteralExpressionAccess().getRule();
	}
	
	//AttributeEquivalenceExpression ConstraintExpression:
	//	{AttributeEquivalenceExpression}
	//	'equal' '(' left=FeatureOfContextVariable ',' right=FeatureOfContextVariable ')'
	public AttributeEquivalenceExpressionElements getAttributeEquivalenceExpressionAccess() {
		return pAttributeEquivalenceExpression;
	}
	
	public ParserRule getAttributeEquivalenceExpressionRule() {
		return getAttributeEquivalenceExpressionAccess().getRule();
	}
	
	//FeatureOfContextVariable:
	//	context=ContextVariable ('.' feature=[ecore::EStructuralFeature|ValidID]);
	public FeatureOfContextVariableElements getFeatureOfContextVariableAccess() {
		return pFeatureOfContextVariable;
	}
	
	public ParserRule getFeatureOfContextVariableRule() {
		return getFeatureOfContextVariableAccess().getRule();
	}
	
	//ContextVariable:
	//	(requiredMappingPath=RequiredMappingPathBase '::')? targetClass=[mirBase::NamedMetaclassReference|ValidID];
	public ContextVariableElements getContextVariableAccess() {
		return pContextVariable;
	}
	
	public ParserRule getContextVariableRule() {
		return getContextVariableAccess().getRule();
	}
	
	//RequiredMappingPathBase:
	//	requiredMapping=[RequiredMapping|ValidID] tail=RequiredMappingPathTail?;
	public RequiredMappingPathBaseElements getRequiredMappingPathBaseAccess() {
		return pRequiredMappingPathBase;
	}
	
	public ParserRule getRequiredMappingPathBaseRule() {
		return getRequiredMappingPathBaseAccess().getRule();
	}
	
	//RequiredMappingPathTail:
	//	'.' requiredMapping=[RequiredMapping|ValidID] tail=RequiredMappingPathTail?;
	public RequiredMappingPathTailElements getRequiredMappingPathTailAccess() {
		return pRequiredMappingPathTail;
	}
	
	public ParserRule getRequiredMappingPathTailRule() {
		return getRequiredMappingPathTailAccess().getRule();
	}
	
	//// LITERALS from Xbase.xtext
	//ConstraintLiteral:
	//	ConstraintBooleanLiteral | ConstraintNullLiteral | ConstraintNumberLiteral | ConstraintStringLiteral;
	public ConstraintLiteralElements getConstraintLiteralAccess() {
		return pConstraintLiteral;
	}
	
	public ParserRule getConstraintLiteralRule() {
		return getConstraintLiteralAccess().getRule();
	}
	
	//ConstraintBooleanLiteral ConstraintLiteral:
	//	{ConstraintBooleanLiteral} ('false' | isTrue?='true')
	public ConstraintBooleanLiteralElements getConstraintBooleanLiteralAccess() {
		return pConstraintBooleanLiteral;
	}
	
	public ParserRule getConstraintBooleanLiteralRule() {
		return getConstraintBooleanLiteralAccess().getRule();
	}
	
	//ConstraintNullLiteral ConstraintLiteral:
	//	{ConstraintNullLiteral} 'null'
	public ConstraintNullLiteralElements getConstraintNullLiteralAccess() {
		return pConstraintNullLiteral;
	}
	
	public ParserRule getConstraintNullLiteralRule() {
		return getConstraintNullLiteralAccess().getRule();
	}
	
	//ConstraintNumberLiteral ConstraintLiteral:
	//	{ConstraintNumberLiteral} value=Number
	public ConstraintNumberLiteralElements getConstraintNumberLiteralAccess() {
		return pConstraintNumberLiteral;
	}
	
	public ParserRule getConstraintNumberLiteralRule() {
		return getConstraintNumberLiteralAccess().getRule();
	}
	
	//ConstraintStringLiteral ConstraintLiteral:
	//	{ConstraintStringLiteral} value=STRING
	public ConstraintStringLiteralElements getConstraintStringLiteralAccess() {
		return pConstraintStringLiteral;
	}
	
	public ParserRule getConstraintStringLiteralRule() {
		return getConstraintStringLiteralAccess().getRule();
	}
	
	//DummyEntryRule:
	//	MirBaseFile;
	public MirBaseGrammarAccess.DummyEntryRuleElements getDummyEntryRuleAccess() {
		return gaMirBase.getDummyEntryRuleAccess();
	}
	
	public ParserRule getDummyEntryRuleRule() {
		return getDummyEntryRuleAccess().getRule();
	}
	
	//fragment MirBaseFile:
	//	metamodelImports+=MetamodelImport*;
	public MirBaseGrammarAccess.MirBaseFileElements getMirBaseFileAccess() {
		return gaMirBase.getMirBaseFileAccess();
	}
	
	public ParserRule getMirBaseFileRule() {
		return getMirBaseFileAccess().getRule();
	}
	
	//MetamodelImport:
	//	'import' package=[ecore::EPackage|STRING] 'as' name=ValidID useQualifiedNames?='using qualified names'?;
	public MirBaseGrammarAccess.MetamodelImportElements getMetamodelImportAccess() {
		return gaMirBase.getMetamodelImportAccess();
	}
	
	public ParserRule getMetamodelImportRule() {
		return getMetamodelImportAccess().getRule();
	}
	
	//NamedJavaElement:
	//	type=JvmTypeReference 'as' name=ValidID;
	public MirBaseGrammarAccess.NamedJavaElementElements getNamedJavaElementAccess() {
		return gaMirBase.getNamedJavaElementAccess();
	}
	
	public ParserRule getNamedJavaElementRule() {
		return getNamedJavaElementAccess().getRule();
	}
	
	//fragment MetaclassReference:
	//	(metamodel=[MetamodelImport] '::')? metaclass=[ecore::EClass|QualifiedName];
	public MirBaseGrammarAccess.MetaclassReferenceElements getMetaclassReferenceAccess() {
		return gaMirBase.getMetaclassReferenceAccess();
	}
	
	public ParserRule getMetaclassReferenceRule() {
		return getMetaclassReferenceAccess().getRule();
	}
	
	//UnnamedMetaclassReference MetaclassReference:
	//	MetaclassReference
	public MirBaseGrammarAccess.UnnamedMetaclassReferenceElements getUnnamedMetaclassReferenceAccess() {
		return gaMirBase.getUnnamedMetaclassReferenceAccess();
	}
	
	public ParserRule getUnnamedMetaclassReferenceRule() {
		return getUnnamedMetaclassReferenceAccess().getRule();
	}
	
	//NamedMetaclassReference:
	//	MetaclassReference ('as' name=ValidID)?;
	public MirBaseGrammarAccess.NamedMetaclassReferenceElements getNamedMetaclassReferenceAccess() {
		return gaMirBase.getNamedMetaclassReferenceAccess();
	}
	
	public ParserRule getNamedMetaclassReferenceRule() {
		return getNamedMetaclassReferenceAccess().getRule();
	}
	
	//ClassicallyNamedModelElement NamedMetaclassReference:
	//	MetaclassReference name=ValidID
	public MirBaseGrammarAccess.ClassicallyNamedModelElementElements getClassicallyNamedModelElementAccess() {
		return gaMirBase.getClassicallyNamedModelElementAccess();
	}
	
	public ParserRule getClassicallyNamedModelElementRule() {
		return getClassicallyNamedModelElementAccess().getRule();
	}
	
	////fragment ModelElement:
	////	element=[ecore::EClass|QualifiedName]
	////;
	////
	////UnnamedModelElement:
	////	ModelElement;
	////		
	////NamedModelElement:
	////	ModelElement ('as' name=ValidID)?
	////;
	//MetaclassFeatureReference:
	//	MetaclassReference '[' feature=[ecore::EStructuralFeature|ValidID] ']';
	public MirBaseGrammarAccess.MetaclassFeatureReferenceElements getMetaclassFeatureReferenceAccess() {
		return gaMirBase.getMetaclassFeatureReferenceAccess();
	}
	
	public ParserRule getMetaclassFeatureReferenceRule() {
		return getMetaclassFeatureReferenceAccess().getRule();
	}
	
	//MetamodelReference:
	//	model=[MetamodelImport];
	public MirBaseGrammarAccess.MetamodelReferenceElements getMetamodelReferenceAccess() {
		return gaMirBase.getMetamodelReferenceAccess();
	}
	
	public ParserRule getMetamodelReferenceRule() {
		return getMetamodelReferenceAccess().getRule();
	}
	
	//DomainReference:
	//	domain=ID;
	public MirBaseGrammarAccess.DomainReferenceElements getDomainReferenceAccess() {
		return gaMirBase.getDomainReferenceAccess();
	}
	
	public ParserRule getDomainReferenceRule() {
		return getDomainReferenceAccess().getRule();
	}
	
	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' | '<' '<' '=' | '>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//	'->' | '..<' | '>' '..' | '..' | '=>' | '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>' | '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)? ')')? memberCallArguments+=XClosure?)*
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure XExpression:
	//	=> ({XClosure} '[') => ((declaredFormalParameters+=JvmFormalParameter (','
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')? expression=XExpressionInClosure ']'
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')'
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression XExpression:
	//	{XIfExpression} 'if' '(' if=XExpression ')' then=XExpression (=> 'else' else=XExpression)?
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression XExpression:
	//	{XSwitchExpression} 'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')' | =>
	//	(declaredParam=JvmFormalParameter ':')? switch=XExpression) '{' cases+=XCasePart* ('default' ':'
	//	default=XExpression)? '}'
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression} 'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression} 'for' '(' (initExpressions+=XExpressionOrVarDeclaration (','
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ';' expression=XExpression? ';' (updateExpressions+=XExpression (','
	//	updateExpressions+=XExpression)*)? ')' eachExpression=XExpression
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression XExpression:
	//	{XWhileExpression} 'while' '(' predicate=XExpression ')' body=XExpression
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression} 'do' body=XExpression 'while' '(' predicate=XExpression ')'
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression XExpression:
	//	{XBlockExpression} '{' (expressions+=XExpressionOrVarDeclaration ';'?)* '}'
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)? ')')? featureCallArguments+=XClosure?
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall XExpression:
	//	{XConstructorCall} 'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')? (=>
	//	explicitConstructorCall?='(' (arguments+=XShortClosure | arguments+=XExpression (',' arguments+=XExpression)*)? ')')?
	//	arguments+=XClosure?
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true')
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null'
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')'
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression} 'try' expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally'
	//	finallyExpression=XExpression)? | 'finally' finallyExpression=XExpression)
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression} 'synchronized' '(') param=XExpression ')' expression=XExpression
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * /
	//StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? | "'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
