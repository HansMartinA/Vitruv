/*
 * generated by Xtext 2.10.0
 */
package tools.vitruv.dsls.mapping.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.common.types.JvmFormalParameter;
import org.eclipse.xtext.common.types.JvmGenericArrayTypeReference;
import org.eclipse.xtext.common.types.JvmInnerTypeReference;
import org.eclipse.xtext.common.types.JvmLowerBound;
import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;
import org.eclipse.xtext.common.types.JvmTypeParameter;
import org.eclipse.xtext.common.types.JvmUpperBound;
import org.eclipse.xtext.common.types.JvmWildcardTypeReference;
import org.eclipse.xtext.common.types.TypesPackage;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.eclipse.xtext.xbase.XAssignment;
import org.eclipse.xtext.xbase.XBasicForLoopExpression;
import org.eclipse.xtext.xbase.XBinaryOperation;
import org.eclipse.xtext.xbase.XBlockExpression;
import org.eclipse.xtext.xbase.XBooleanLiteral;
import org.eclipse.xtext.xbase.XCasePart;
import org.eclipse.xtext.xbase.XCastedExpression;
import org.eclipse.xtext.xbase.XCatchClause;
import org.eclipse.xtext.xbase.XClosure;
import org.eclipse.xtext.xbase.XConstructorCall;
import org.eclipse.xtext.xbase.XDoWhileExpression;
import org.eclipse.xtext.xbase.XFeatureCall;
import org.eclipse.xtext.xbase.XForLoopExpression;
import org.eclipse.xtext.xbase.XIfExpression;
import org.eclipse.xtext.xbase.XInstanceOfExpression;
import org.eclipse.xtext.xbase.XListLiteral;
import org.eclipse.xtext.xbase.XMemberFeatureCall;
import org.eclipse.xtext.xbase.XNullLiteral;
import org.eclipse.xtext.xbase.XNumberLiteral;
import org.eclipse.xtext.xbase.XPostfixOperation;
import org.eclipse.xtext.xbase.XReturnExpression;
import org.eclipse.xtext.xbase.XSetLiteral;
import org.eclipse.xtext.xbase.XStringLiteral;
import org.eclipse.xtext.xbase.XSwitchExpression;
import org.eclipse.xtext.xbase.XSynchronizedExpression;
import org.eclipse.xtext.xbase.XThrowExpression;
import org.eclipse.xtext.xbase.XTryCatchFinallyExpression;
import org.eclipse.xtext.xbase.XTypeLiteral;
import org.eclipse.xtext.xbase.XUnaryOperation;
import org.eclipse.xtext.xbase.XVariableDeclaration;
import org.eclipse.xtext.xbase.XWhileExpression;
import org.eclipse.xtext.xbase.XbasePackage;
import org.eclipse.xtext.xtype.XFunctionTypeRef;
import org.eclipse.xtext.xtype.XImportDeclaration;
import org.eclipse.xtext.xtype.XImportSection;
import org.eclipse.xtext.xtype.XtypePackage;
import tools.vitruv.dsls.mapping.mappingLanguage.AttributeEquivalenceExpression;
import tools.vitruv.dsls.mapping.mappingLanguage.BodyConstraintBlock;
import tools.vitruv.dsls.mapping.mappingLanguage.ConstraintBooleanLiteral;
import tools.vitruv.dsls.mapping.mappingLanguage.ConstraintNullLiteral;
import tools.vitruv.dsls.mapping.mappingLanguage.ConstraintNumberLiteral;
import tools.vitruv.dsls.mapping.mappingLanguage.ConstraintStringLiteral;
import tools.vitruv.dsls.mapping.mappingLanguage.ContextVariable;
import tools.vitruv.dsls.mapping.mappingLanguage.DefaultContainExpression;
import tools.vitruv.dsls.mapping.mappingLanguage.EqualsLiteralExpression;
import tools.vitruv.dsls.mapping.mappingLanguage.FeatureOfContextVariable;
import tools.vitruv.dsls.mapping.mappingLanguage.InExpression;
import tools.vitruv.dsls.mapping.mappingLanguage.Mapping;
import tools.vitruv.dsls.mapping.mappingLanguage.MappingFile;
import tools.vitruv.dsls.mapping.mappingLanguage.MappingLanguagePackage;
import tools.vitruv.dsls.mapping.mappingLanguage.NotNullExpression;
import tools.vitruv.dsls.mapping.mappingLanguage.RequiredMapping;
import tools.vitruv.dsls.mapping.mappingLanguage.RequiredMappingPathBase;
import tools.vitruv.dsls.mapping.mappingLanguage.RequiredMappingPathTail;
import tools.vitruv.dsls.mapping.mappingLanguage.Signature;
import tools.vitruv.dsls.mapping.mappingLanguage.SignatureConstraintBlock;
import tools.vitruv.dsls.mapping.mappingLanguage.VariableRef;
import tools.vitruv.dsls.mapping.mappingLanguage.XbaseBodyConstraintExpression;
import tools.vitruv.dsls.mapping.mappingLanguage.XbaseSignatureConstraintExpression;
import tools.vitruv.dsls.mapping.services.MappingLanguageGrammarAccess;
import tools.vitruv.dsls.mirbase.mirBase.DomainReference;
import tools.vitruv.dsls.mirbase.mirBase.DummyEntryRule;
import tools.vitruv.dsls.mirbase.mirBase.MetaclassFeatureReference;
import tools.vitruv.dsls.mirbase.mirBase.MetaclassReference;
import tools.vitruv.dsls.mirbase.mirBase.MetamodelImport;
import tools.vitruv.dsls.mirbase.mirBase.MetamodelReference;
import tools.vitruv.dsls.mirbase.mirBase.MirBasePackage;
import tools.vitruv.dsls.mirbase.mirBase.NamedJavaElement;
import tools.vitruv.dsls.mirbase.mirBase.NamedMetaclassReference;
import tools.vitruv.dsls.mirbase.serializer.MirBaseSemanticSequencer;

@SuppressWarnings("all")
public abstract class AbstractMappingLanguageSemanticSequencer extends MirBaseSemanticSequencer {

	@Inject
	private MappingLanguageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == MappingLanguagePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MappingLanguagePackage.ATTRIBUTE_EQUIVALENCE_EXPRESSION:
				sequence_AttributeEquivalenceExpression(context, (AttributeEquivalenceExpression) semanticObject); 
				return; 
			case MappingLanguagePackage.BODY_CONSTRAINT_BLOCK:
				sequence_BodyConstraintBlock(context, (BodyConstraintBlock) semanticObject); 
				return; 
			case MappingLanguagePackage.CONSTRAINT_BOOLEAN_LITERAL:
				sequence_ConstraintBooleanLiteral(context, (ConstraintBooleanLiteral) semanticObject); 
				return; 
			case MappingLanguagePackage.CONSTRAINT_NULL_LITERAL:
				sequence_ConstraintNullLiteral(context, (ConstraintNullLiteral) semanticObject); 
				return; 
			case MappingLanguagePackage.CONSTRAINT_NUMBER_LITERAL:
				sequence_ConstraintNumberLiteral(context, (ConstraintNumberLiteral) semanticObject); 
				return; 
			case MappingLanguagePackage.CONSTRAINT_STRING_LITERAL:
				sequence_ConstraintStringLiteral(context, (ConstraintStringLiteral) semanticObject); 
				return; 
			case MappingLanguagePackage.CONTEXT_VARIABLE:
				sequence_ContextVariable(context, (ContextVariable) semanticObject); 
				return; 
			case MappingLanguagePackage.DEFAULT_CONTAIN_EXPRESSION:
				sequence_DefaultContainExpression(context, (DefaultContainExpression) semanticObject); 
				return; 
			case MappingLanguagePackage.EQUALS_LITERAL_EXPRESSION:
				sequence_EqualsLiteralExpression(context, (EqualsLiteralExpression) semanticObject); 
				return; 
			case MappingLanguagePackage.FEATURE_OF_CONTEXT_VARIABLE:
				sequence_FeatureOfContextVariable(context, (FeatureOfContextVariable) semanticObject); 
				return; 
			case MappingLanguagePackage.IN_EXPRESSION:
				sequence_InExpression(context, (InExpression) semanticObject); 
				return; 
			case MappingLanguagePackage.MAPPING:
				if (rule == grammarAccess.getDefaultMappingRule()) {
					sequence_DefaultMapping(context, (Mapping) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getMappingRule()) {
					sequence_Mapping(context, (Mapping) semanticObject); 
					return; 
				}
				else break;
			case MappingLanguagePackage.MAPPING_FILE:
				sequence_MappingFile(context, (MappingFile) semanticObject); 
				return; 
			case MappingLanguagePackage.NOT_NULL_EXPRESSION:
				sequence_NotNullExpression(context, (NotNullExpression) semanticObject); 
				return; 
			case MappingLanguagePackage.REQUIRED_MAPPING:
				sequence_RequiredMapping(context, (RequiredMapping) semanticObject); 
				return; 
			case MappingLanguagePackage.REQUIRED_MAPPING_PATH_BASE:
				sequence_RequiredMappingPathBase(context, (RequiredMappingPathBase) semanticObject); 
				return; 
			case MappingLanguagePackage.REQUIRED_MAPPING_PATH_TAIL:
				sequence_RequiredMappingPathTail(context, (RequiredMappingPathTail) semanticObject); 
				return; 
			case MappingLanguagePackage.SIGNATURE:
				sequence_Signature(context, (Signature) semanticObject); 
				return; 
			case MappingLanguagePackage.SIGNATURE_CONSTRAINT_BLOCK:
				sequence_SignatureConstraintBlock(context, (SignatureConstraintBlock) semanticObject); 
				return; 
			case MappingLanguagePackage.VARIABLE_REF:
				sequence_VariableRef(context, (VariableRef) semanticObject); 
				return; 
			case MappingLanguagePackage.XBASE_BODY_CONSTRAINT_EXPRESSION:
				sequence_XbaseBodyConstraintExpression(context, (XbaseBodyConstraintExpression) semanticObject); 
				return; 
			case MappingLanguagePackage.XBASE_SIGNATURE_CONSTRAINT_EXPRESSION:
				sequence_XbaseSignatureConstraintExpression(context, (XbaseSignatureConstraintExpression) semanticObject); 
				return; 
			}
		else if (epackage == MirBasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case MirBasePackage.DOMAIN_REFERENCE:
				sequence_DomainReference(context, (DomainReference) semanticObject); 
				return; 
			case MirBasePackage.DUMMY_ENTRY_RULE:
				sequence_MirBaseFile(context, (DummyEntryRule) semanticObject); 
				return; 
			case MirBasePackage.METACLASS_FEATURE_REFERENCE:
				sequence_MetaclassFeatureReference_MetaclassReference(context, (MetaclassFeatureReference) semanticObject); 
				return; 
			case MirBasePackage.METACLASS_REFERENCE:
				sequence_MetaclassReference(context, (MetaclassReference) semanticObject); 
				return; 
			case MirBasePackage.METAMODEL_IMPORT:
				sequence_MetamodelImport(context, (MetamodelImport) semanticObject); 
				return; 
			case MirBasePackage.METAMODEL_REFERENCE:
				sequence_MetamodelReference(context, (MetamodelReference) semanticObject); 
				return; 
			case MirBasePackage.NAMED_JAVA_ELEMENT:
				sequence_NamedJavaElement(context, (NamedJavaElement) semanticObject); 
				return; 
			case MirBasePackage.NAMED_METACLASS_REFERENCE:
				if (rule == grammarAccess.getClassicallyNamedModelElementRule()) {
					sequence_ClassicallyNamedModelElement_MetaclassReference(context, (NamedMetaclassReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNamedMetaclassReferenceRule()) {
					sequence_MetaclassReference_NamedMetaclassReference(context, (NamedMetaclassReference) semanticObject); 
					return; 
				}
				else break;
			}
		else if (epackage == TypesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TypesPackage.JVM_FORMAL_PARAMETER:
				if (rule == grammarAccess.getFullJvmFormalParameterRule()) {
					sequence_FullJvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmFormalParameterRule()) {
					sequence_JvmFormalParameter(context, (JvmFormalParameter) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_GENERIC_ARRAY_TYPE_REFERENCE:
				sequence_JvmTypeReference(context, (JvmGenericArrayTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_INNER_TYPE_REFERENCE:
				sequence_JvmParameterizedTypeReference(context, (JvmInnerTypeReference) semanticObject); 
				return; 
			case TypesPackage.JVM_LOWER_BOUND:
				if (rule == grammarAccess.getJvmLowerBoundAndedRule()) {
					sequence_JvmLowerBoundAnded(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmLowerBoundRule()) {
					sequence_JvmLowerBound(context, (JvmLowerBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_PARAMETERIZED_TYPE_REFERENCE:
				if (action == grammarAccess.getJvmParameterizedTypeReferenceAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0()) {
					sequence_JvmParameterizedTypeReference_JvmInnerTypeReference_1_4_0_0_0(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmTypeReferenceRule()
						|| action == grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0()
						|| rule == grammarAccess.getJvmParameterizedTypeReferenceRule()
						|| rule == grammarAccess.getJvmArgumentTypeReferenceRule()) {
					sequence_JvmParameterizedTypeReference(context, (JvmParameterizedTypeReference) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_TYPE_PARAMETER:
				sequence_JvmTypeParameter(context, (JvmTypeParameter) semanticObject); 
				return; 
			case TypesPackage.JVM_UPPER_BOUND:
				if (rule == grammarAccess.getJvmUpperBoundAndedRule()) {
					sequence_JvmUpperBoundAnded(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getJvmUpperBoundRule()) {
					sequence_JvmUpperBound(context, (JvmUpperBound) semanticObject); 
					return; 
				}
				else break;
			case TypesPackage.JVM_WILDCARD_TYPE_REFERENCE:
				sequence_JvmWildcardTypeReference(context, (JvmWildcardTypeReference) semanticObject); 
				return; 
			}
		else if (epackage == XbasePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XbasePackage.XASSIGNMENT:
				sequence_XAssignment_XMemberFeatureCall(context, (XAssignment) semanticObject); 
				return; 
			case XbasePackage.XBASIC_FOR_LOOP_EXPRESSION:
				sequence_XBasicForLoopExpression(context, (XBasicForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XBINARY_OPERATION:
				sequence_XAdditiveExpression_XAndExpression_XAssignment_XEqualityExpression_XMultiplicativeExpression_XOrExpression_XOtherOperatorExpression_XRelationalExpression(context, (XBinaryOperation) semanticObject); 
				return; 
			case XbasePackage.XBLOCK_EXPRESSION:
				if (rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXBlockExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XBlockExpression(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXExpressionInClosureRule()) {
					sequence_XExpressionInClosure(context, (XBlockExpression) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XBOOLEAN_LITERAL:
				sequence_XBooleanLiteral(context, (XBooleanLiteral) semanticObject); 
				return; 
			case XbasePackage.XCASE_PART:
				sequence_XCasePart(context, (XCasePart) semanticObject); 
				return; 
			case XbasePackage.XCASTED_EXPRESSION:
				sequence_XCastedExpression(context, (XCastedExpression) semanticObject); 
				return; 
			case XbasePackage.XCATCH_CLAUSE:
				sequence_XCatchClause(context, (XCatchClause) semanticObject); 
				return; 
			case XbasePackage.XCLOSURE:
				if (rule == grammarAccess.getXExpressionRule()
						|| rule == grammarAccess.getXAssignmentRule()
						|| action == grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOrExpressionRule()
						|| action == grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAndExpressionRule()
						|| action == grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXEqualityExpressionRule()
						|| action == grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXRelationalExpressionRule()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0()
						|| action == grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0()
						|| rule == grammarAccess.getXOtherOperatorExpressionRule()
						|| action == grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXAdditiveExpressionRule()
						|| action == grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXMultiplicativeExpressionRule()
						|| action == grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0()
						|| rule == grammarAccess.getXUnaryOperationRule()
						|| rule == grammarAccess.getXCastedExpressionRule()
						|| action == grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0()
						|| rule == grammarAccess.getXPostfixOperationRule()
						|| action == grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0()
						|| rule == grammarAccess.getXMemberFeatureCallRule()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0()
						|| action == grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0()
						|| rule == grammarAccess.getXPrimaryExpressionRule()
						|| rule == grammarAccess.getXLiteralRule()
						|| rule == grammarAccess.getXClosureRule()
						|| rule == grammarAccess.getXParenthesizedExpressionRule()
						|| rule == grammarAccess.getXExpressionOrVarDeclarationRule()) {
					sequence_XClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getXShortClosureRule()) {
					sequence_XShortClosure(context, (XClosure) semanticObject); 
					return; 
				}
				else break;
			case XbasePackage.XCONSTRUCTOR_CALL:
				sequence_XConstructorCall(context, (XConstructorCall) semanticObject); 
				return; 
			case XbasePackage.XDO_WHILE_EXPRESSION:
				sequence_XDoWhileExpression(context, (XDoWhileExpression) semanticObject); 
				return; 
			case XbasePackage.XFEATURE_CALL:
				sequence_XFeatureCall(context, (XFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XFOR_LOOP_EXPRESSION:
				sequence_XForLoopExpression(context, (XForLoopExpression) semanticObject); 
				return; 
			case XbasePackage.XIF_EXPRESSION:
				sequence_XIfExpression(context, (XIfExpression) semanticObject); 
				return; 
			case XbasePackage.XINSTANCE_OF_EXPRESSION:
				sequence_XRelationalExpression(context, (XInstanceOfExpression) semanticObject); 
				return; 
			case XbasePackage.XLIST_LITERAL:
				sequence_XListLiteral(context, (XListLiteral) semanticObject); 
				return; 
			case XbasePackage.XMEMBER_FEATURE_CALL:
				sequence_XMemberFeatureCall(context, (XMemberFeatureCall) semanticObject); 
				return; 
			case XbasePackage.XNULL_LITERAL:
				sequence_XNullLiteral(context, (XNullLiteral) semanticObject); 
				return; 
			case XbasePackage.XNUMBER_LITERAL:
				sequence_XNumberLiteral(context, (XNumberLiteral) semanticObject); 
				return; 
			case XbasePackage.XPOSTFIX_OPERATION:
				sequence_XPostfixOperation(context, (XPostfixOperation) semanticObject); 
				return; 
			case XbasePackage.XRETURN_EXPRESSION:
				sequence_XReturnExpression(context, (XReturnExpression) semanticObject); 
				return; 
			case XbasePackage.XSET_LITERAL:
				sequence_XSetLiteral(context, (XSetLiteral) semanticObject); 
				return; 
			case XbasePackage.XSTRING_LITERAL:
				sequence_XStringLiteral(context, (XStringLiteral) semanticObject); 
				return; 
			case XbasePackage.XSWITCH_EXPRESSION:
				sequence_XSwitchExpression(context, (XSwitchExpression) semanticObject); 
				return; 
			case XbasePackage.XSYNCHRONIZED_EXPRESSION:
				sequence_XSynchronizedExpression(context, (XSynchronizedExpression) semanticObject); 
				return; 
			case XbasePackage.XTHROW_EXPRESSION:
				sequence_XThrowExpression(context, (XThrowExpression) semanticObject); 
				return; 
			case XbasePackage.XTRY_CATCH_FINALLY_EXPRESSION:
				sequence_XTryCatchFinallyExpression(context, (XTryCatchFinallyExpression) semanticObject); 
				return; 
			case XbasePackage.XTYPE_LITERAL:
				sequence_XTypeLiteral(context, (XTypeLiteral) semanticObject); 
				return; 
			case XbasePackage.XUNARY_OPERATION:
				sequence_XUnaryOperation(context, (XUnaryOperation) semanticObject); 
				return; 
			case XbasePackage.XVARIABLE_DECLARATION:
				sequence_XVariableDeclaration(context, (XVariableDeclaration) semanticObject); 
				return; 
			case XbasePackage.XWHILE_EXPRESSION:
				sequence_XWhileExpression(context, (XWhileExpression) semanticObject); 
				return; 
			}
		else if (epackage == XtypePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XtypePackage.XFUNCTION_TYPE_REF:
				sequence_XFunctionTypeRef(context, (XFunctionTypeRef) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_DECLARATION:
				sequence_XImportDeclaration(context, (XImportDeclaration) semanticObject); 
				return; 
			case XtypePackage.XIMPORT_SECTION:
				sequence_XImportSection(context, (XImportSection) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ConstraintExpression returns AttributeEquivalenceExpression
	 *     BodyConstraintExpression returns AttributeEquivalenceExpression
	 *     AttributeEquivalenceExpression returns AttributeEquivalenceExpression
	 *
	 * Constraint:
	 *     (left=FeatureOfContextVariable right=FeatureOfContextVariable)
	 */
	protected void sequence_AttributeEquivalenceExpression(ISerializationContext context, AttributeEquivalenceExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MappingLanguagePackage.Literals.ATTRIBUTE_EQUIVALENCE_EXPRESSION__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingLanguagePackage.Literals.ATTRIBUTE_EQUIVALENCE_EXPRESSION__LEFT));
			if (transientValues.isValueTransient(semanticObject, MappingLanguagePackage.Literals.ATTRIBUTE_EQUIVALENCE_EXPRESSION__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingLanguagePackage.Literals.ATTRIBUTE_EQUIVALENCE_EXPRESSION__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttributeEquivalenceExpressionAccess().getLeftFeatureOfContextVariableParserRuleCall_3_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getAttributeEquivalenceExpressionAccess().getRightFeatureOfContextVariableParserRuleCall_5_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConstraintBlock returns BodyConstraintBlock
	 *     BodyConstraintBlock returns BodyConstraintBlock
	 *
	 * Constraint:
	 *     expressions+=BodyConstraintExpression*
	 */
	protected void sequence_BodyConstraintBlock(ISerializationContext context, BodyConstraintBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConstraintLiteral returns ConstraintBooleanLiteral
	 *     ConstraintBooleanLiteral returns ConstraintBooleanLiteral
	 *
	 * Constraint:
	 *     isTrue?='true'?
	 */
	protected void sequence_ConstraintBooleanLiteral(ISerializationContext context, ConstraintBooleanLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConstraintLiteral returns ConstraintNullLiteral
	 *     ConstraintNullLiteral returns ConstraintNullLiteral
	 *
	 * Constraint:
	 *     {ConstraintNullLiteral}
	 */
	protected void sequence_ConstraintNullLiteral(ISerializationContext context, ConstraintNullLiteral semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConstraintLiteral returns ConstraintNumberLiteral
	 *     ConstraintNumberLiteral returns ConstraintNumberLiteral
	 *
	 * Constraint:
	 *     value=Number
	 */
	protected void sequence_ConstraintNumberLiteral(ISerializationContext context, ConstraintNumberLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MappingLanguagePackage.Literals.CONSTRAINT_NUMBER_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingLanguagePackage.Literals.CONSTRAINT_NUMBER_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstraintNumberLiteralAccess().getValueNumberParserRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConstraintLiteral returns ConstraintStringLiteral
	 *     ConstraintStringLiteral returns ConstraintStringLiteral
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_ConstraintStringLiteral(ISerializationContext context, ConstraintStringLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MappingLanguagePackage.Literals.CONSTRAINT_STRING_LITERAL__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingLanguagePackage.Literals.CONSTRAINT_STRING_LITERAL__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConstraintStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContextVariable returns ContextVariable
	 *
	 * Constraint:
	 *     (requiredMappingPath=RequiredMappingPathBase? targetClass=[NamedMetaclassReference|ValidID])
	 */
	protected void sequence_ContextVariable(ISerializationContext context, ContextVariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConstraintExpression returns DefaultContainExpression
	 *     SignatureConstraintExpression returns DefaultContainExpression
	 *     DefaultContainExpression returns DefaultContainExpression
	 *
	 * Constraint:
	 *     (
	 *         (target=ContextVariable source=FeatureOfContextVariable) | 
	 *         (target=ContextVariable relativeResource=STRING relativeResourceSource=ContextVariable?)
	 *     )
	 */
	protected void sequence_DefaultContainExpression(ISerializationContext context, DefaultContainExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DefaultMapping returns Mapping
	 *
	 * Constraint:
	 *     (default?='default' name=ValidID (signatures+=Signature constraints+=SignatureConstraintBlock)*)
	 */
	protected void sequence_DefaultMapping(ISerializationContext context, Mapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConstraintExpression returns EqualsLiteralExpression
	 *     SignatureConstraintExpression returns EqualsLiteralExpression
	 *     EqualsLiteralExpression returns EqualsLiteralExpression
	 *
	 * Constraint:
	 *     (target=FeatureOfContextVariable value=ConstraintLiteral)
	 */
	protected void sequence_EqualsLiteralExpression(ISerializationContext context, EqualsLiteralExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MappingLanguagePackage.Literals.EQUALS_LITERAL_EXPRESSION__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingLanguagePackage.Literals.EQUALS_LITERAL_EXPRESSION__TARGET));
			if (transientValues.isValueTransient(semanticObject, MappingLanguagePackage.Literals.EQUALS_LITERAL_EXPRESSION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingLanguagePackage.Literals.EQUALS_LITERAL_EXPRESSION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEqualsLiteralExpressionAccess().getTargetFeatureOfContextVariableParserRuleCall_3_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getEqualsLiteralExpressionAccess().getValueConstraintLiteralParserRuleCall_5_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     FeatureOfContextVariable returns FeatureOfContextVariable
	 *
	 * Constraint:
	 *     (context=ContextVariable feature=[EStructuralFeature|ValidID])
	 */
	protected void sequence_FeatureOfContextVariable(ISerializationContext context, FeatureOfContextVariable semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MappingLanguagePackage.Literals.FEATURE_OF_CONTEXT_VARIABLE__CONTEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingLanguagePackage.Literals.FEATURE_OF_CONTEXT_VARIABLE__CONTEXT));
			if (transientValues.isValueTransient(semanticObject, MappingLanguagePackage.Literals.FEATURE_OF_CONTEXT_VARIABLE__FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingLanguagePackage.Literals.FEATURE_OF_CONTEXT_VARIABLE__FEATURE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFeatureOfContextVariableAccess().getContextContextVariableParserRuleCall_0_0(), semanticObject.getContext());
		feeder.accept(grammarAccess.getFeatureOfContextVariableAccess().getFeatureEStructuralFeatureValidIDParserRuleCall_1_1_0_1(), semanticObject.getFeature());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConstraintExpression returns InExpression
	 *     SignatureConstraintExpression returns InExpression
	 *     InExpression returns InExpression
	 *
	 * Constraint:
	 *     (target=ContextVariable source=FeatureOfContextVariable)
	 */
	protected void sequence_InExpression(ISerializationContext context, InExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MappingLanguagePackage.Literals.IN_EXPRESSION__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingLanguagePackage.Literals.IN_EXPRESSION__TARGET));
			if (transientValues.isValueTransient(semanticObject, MappingLanguagePackage.Literals.IN_EXPRESSION__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingLanguagePackage.Literals.IN_EXPRESSION__SOURCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInExpressionAccess().getTargetContextVariableParserRuleCall_3_0(), semanticObject.getTarget());
		feeder.accept(grammarAccess.getInExpressionAccess().getSourceFeatureOfContextVariableParserRuleCall_5_0(), semanticObject.getSource());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MappingFile returns MappingFile
	 *
	 * Constraint:
	 *     (imports+=MetamodelImport+ | (imports+=MetamodelImport+ (mappings+=Mapping | mappings+=DefaultMapping)+))?
	 */
	protected void sequence_MappingFile(ISerializationContext context, MappingFile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Mapping returns Mapping
	 *
	 * Constraint:
	 *     (
	 *         name=ValidID? 
	 *         (requires+=RequiredMapping requires+=RequiredMapping*)? 
	 *         (signatures+=Signature constraints+=SignatureConstraintBlock? signatures+=Signature constraints+=SignatureConstraintBlock?)? 
	 *         (constraintsBody=BodyConstraintBlock childMappings+=Mapping*)?
	 *     )
	 */
	protected void sequence_Mapping(ISerializationContext context, Mapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConstraintExpression returns NotNullExpression
	 *     SignatureConstraintExpression returns NotNullExpression
	 *     NotNullExpression returns NotNullExpression
	 *
	 * Constraint:
	 *     notNullable=FeatureOfContextVariable
	 */
	protected void sequence_NotNullExpression(ISerializationContext context, NotNullExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MappingLanguagePackage.Literals.NOT_NULL_EXPRESSION__NOT_NULLABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingLanguagePackage.Literals.NOT_NULL_EXPRESSION__NOT_NULLABLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNotNullExpressionAccess().getNotNullableFeatureOfContextVariableParserRuleCall_3_0(), semanticObject.getNotNullable());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RequiredMappingPathBase returns RequiredMappingPathBase
	 *
	 * Constraint:
	 *     (requiredMapping=[RequiredMapping|ValidID] tail=RequiredMappingPathTail?)
	 */
	protected void sequence_RequiredMappingPathBase(ISerializationContext context, RequiredMappingPathBase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RequiredMappingPathTail returns RequiredMappingPathTail
	 *
	 * Constraint:
	 *     (requiredMapping=[RequiredMapping|ValidID] tail=RequiredMappingPathTail?)
	 */
	protected void sequence_RequiredMappingPathTail(ISerializationContext context, RequiredMappingPathTail semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RequiredMapping returns RequiredMapping
	 *
	 * Constraint:
	 *     (mapping=[Mapping|ID] name=ValidID?)
	 */
	protected void sequence_RequiredMapping(ISerializationContext context, RequiredMapping semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ConstraintBlock returns SignatureConstraintBlock
	 *     SignatureConstraintBlock returns SignatureConstraintBlock
	 *
	 * Constraint:
	 *     expressions+=SignatureConstraintExpression*
	 */
	protected void sequence_SignatureConstraintBlock(ISerializationContext context, SignatureConstraintBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Signature returns Signature
	 *
	 * Constraint:
	 *     (declaredPackage=MetamodelReference? (elements+=NamedMetaclassReference elements+=NamedMetaclassReference*)?)
	 */
	protected void sequence_Signature(ISerializationContext context, Signature semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VariableRef returns VariableRef
	 *
	 * Constraint:
	 *     target=ContextVariable
	 */
	protected void sequence_VariableRef(ISerializationContext context, VariableRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MappingLanguagePackage.Literals.VARIABLE_REF__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingLanguagePackage.Literals.VARIABLE_REF__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableRefAccess().getTargetContextVariableParserRuleCall_1_0(), semanticObject.getTarget());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConstraintExpression returns XbaseBodyConstraintExpression
	 *     XbaseBodyConstraintExpression returns XbaseBodyConstraintExpression
	 *     BodyConstraintExpression returns XbaseBodyConstraintExpression
	 *
	 * Constraint:
	 *     (metamodel=MetamodelReference block=XBlockExpression)
	 */
	protected void sequence_XbaseBodyConstraintExpression(ISerializationContext context, XbaseBodyConstraintExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MappingLanguagePackage.Literals.XBASE_BODY_CONSTRAINT_EXPRESSION__METAMODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingLanguagePackage.Literals.XBASE_BODY_CONSTRAINT_EXPRESSION__METAMODEL));
			if (transientValues.isValueTransient(semanticObject, MappingLanguagePackage.Literals.XBASE_BODY_CONSTRAINT_EXPRESSION__BLOCK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingLanguagePackage.Literals.XBASE_BODY_CONSTRAINT_EXPRESSION__BLOCK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXbaseBodyConstraintExpressionAccess().getMetamodelMetamodelReferenceParserRuleCall_3_0(), semanticObject.getMetamodel());
		feeder.accept(grammarAccess.getXbaseBodyConstraintExpressionAccess().getBlockXBlockExpressionParserRuleCall_5_0(), semanticObject.getBlock());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConstraintExpression returns XbaseSignatureConstraintExpression
	 *     SignatureConstraintExpression returns XbaseSignatureConstraintExpression
	 *     XbaseSignatureConstraintExpression returns XbaseSignatureConstraintExpression
	 *
	 * Constraint:
	 *     (checkBlock=XBlockExpression enforceBlock=XBlockExpression)
	 */
	protected void sequence_XbaseSignatureConstraintExpression(ISerializationContext context, XbaseSignatureConstraintExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, MappingLanguagePackage.Literals.XBASE_SIGNATURE_CONSTRAINT_EXPRESSION__CHECK_BLOCK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingLanguagePackage.Literals.XBASE_SIGNATURE_CONSTRAINT_EXPRESSION__CHECK_BLOCK));
			if (transientValues.isValueTransient(semanticObject, MappingLanguagePackage.Literals.XBASE_SIGNATURE_CONSTRAINT_EXPRESSION__ENFORCE_BLOCK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, MappingLanguagePackage.Literals.XBASE_SIGNATURE_CONSTRAINT_EXPRESSION__ENFORCE_BLOCK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getXbaseSignatureConstraintExpressionAccess().getCheckBlockXBlockExpressionParserRuleCall_3_0(), semanticObject.getCheckBlock());
		feeder.accept(grammarAccess.getXbaseSignatureConstraintExpressionAccess().getEnforceBlockXBlockExpressionParserRuleCall_5_0(), semanticObject.getEnforceBlock());
		feeder.finish();
	}
	
	
}
